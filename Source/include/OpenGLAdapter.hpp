// CodeGear C++Builder
// Copyright (c) 1995, 2012 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'OpenGLAdapter.pas' rev: 24.00 (Win32)

#ifndef OpengladapterHPP
#define OpengladapterHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit
#include <Winapi.Windows.hpp>	// Pascal unit
#include <OpenGLTokens.hpp>	// Pascal unit
#include <VectorGeometry.hpp>	// Pascal unit
#include <VectorTypes.hpp>	// Pascal unit
#include <System.SysUtils.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------

namespace Opengladapter
{
//-- type declarations -------------------------------------------------------
class DELPHICLASS EOpenGLError;
#pragma pack(push,4)
class PASCALIMPLEMENTATION EOpenGLError : public System::Sysutils::Exception
{
	typedef System::Sysutils::Exception inherited;
	
public:
	/* Exception.Create */ inline __fastcall EOpenGLError(const System::UnicodeString Msg) : System::Sysutils::Exception(Msg) { }
	/* Exception.CreateFmt */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, System::TVarRec const *Args, const int Args_Size) : System::Sysutils::Exception(Msg, Args, Args_Size) { }
	/* Exception.CreateRes */ inline __fastcall EOpenGLError(NativeUInt Ident)/* overload */ : System::Sysutils::Exception(Ident) { }
	/* Exception.CreateRes */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec)/* overload */ : System::Sysutils::Exception(ResStringRec) { }
	/* Exception.CreateResFmt */ inline __fastcall EOpenGLError(NativeUInt Ident, System::TVarRec const *Args, const int Args_Size)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_Size) { }
	/* Exception.CreateResFmt */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, System::TVarRec const *Args, const int Args_Size)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_Size) { }
	/* Exception.CreateHelp */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, int AHelpContext) : System::Sysutils::Exception(Msg, AHelpContext) { }
	/* Exception.CreateFmtHelp */ inline __fastcall EOpenGLError(const System::UnicodeString Msg, System::TVarRec const *Args, const int Args_Size, int AHelpContext) : System::Sysutils::Exception(Msg, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EOpenGLError(NativeUInt Ident, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, AHelpContext) { }
	/* Exception.CreateResHelp */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EOpenGLError(System::PResStringRec ResStringRec, System::TVarRec const *Args, const int Args_Size, int AHelpContext)/* overload */ : System::Sysutils::Exception(ResStringRec, Args, Args_Size, AHelpContext) { }
	/* Exception.CreateResFmtHelp */ inline __fastcall EOpenGLError(NativeUInt Ident, System::TVarRec const *Args, const int Args_Size, int AHelpContext)/* overload */ : System::Sysutils::Exception(Ident, Args, Args_Size, AHelpContext) { }
	/* Exception.Destroy */ inline __fastcall virtual ~EOpenGLError(void) { }
	
};

#pragma pack(pop)

class DELPHICLASS TGLExtensionsAndEntryPoints;
#pragma pack(push,4)
class PASCALIMPLEMENTATION TGLExtensionsAndEntryPoints : public System::TObject
{
	typedef System::TObject inherited;
	
private:
	System::UnicodeString FBuffer;
	bool FInitialized;
	bool FDebug;
	unsigned FDebugIds;
	bool __fastcall CheckExtension(const System::UnicodeString Extension);
	void __fastcall ReadWGLExtensions(void);
	void __fastcall ReadWGLImplementationProperties(void);
	void * __fastcall GetAddress(System::UnicodeString ProcName);
	void * __fastcall GetAddressNoSuffixes(System::UnicodeString ProcName);
	void * __fastcall GetAddressAlt(System::UnicodeString ProcName1, System::UnicodeString ProcName2);
	void * __fastcall GetCapAddress(void);
	
public:
	bool VERSION_1_0;
	bool VERSION_1_1;
	bool VERSION_1_2;
	bool VERSION_1_3;
	bool VERSION_1_4;
	bool VERSION_1_5;
	bool VERSION_2_0;
	bool VERSION_2_1;
	bool VERSION_3_0;
	bool VERSION_3_1;
	bool VERSION_3_2;
	bool VERSION_3_3;
	bool VERSION_4_0;
	bool VERSION_4_1;
	bool VERSION_4_2;
	bool ARB_blend_func_extended;
	bool ARB_color_buffer_float;
	bool ARB_compatibility;
	bool ARB_copy_buffer;
	bool ARB_depth_buffer_float;
	bool ARB_depth_clamp;
	bool ARB_depth_texture;
	bool ARB_draw_buffers;
	bool ARB_draw_buffers_blend;
	bool ARB_draw_elements_base_vertex;
	bool ARB_draw_indirect;
	bool ARB_draw_instanced;
	bool ARB_explicit_attrib_location;
	bool ARB_fragment_coord_conventions;
	bool ARB_fragment_program;
	bool ARB_fragment_program_shadow;
	bool ARB_fragment_shader;
	bool ARB_framebuffer_object;
	bool ARB_framebuffer_sRGB;
	bool ARB_geometry_shader4;
	bool ARB_gpu_shader_fp64;
	bool ARB_gpu_shader5;
	bool ARB_half_float_pixel;
	bool ARB_half_float_vertex;
	bool ARB_imaging;
	bool ARB_instanced_arrays;
	bool ARB_map_buffer_range;
	bool ARB_matrix_palette;
	bool ARB_multisample;
	bool ARB_multitexture;
	bool ARB_occlusion_query;
	bool ARB_occlusion_query2;
	bool ARB_pixel_buffer_object;
	bool ARB_point_parameters;
	bool ARB_point_sprite;
	bool ARB_provoking_vertex;
	bool ARB_sample_shading;
	bool ARB_sampler_objects;
	bool ARB_seamless_cube_map;
	bool ARB_shader_bit_encoding;
	bool ARB_shader_subroutine;
	bool ARB_shader_texture_lod;
	bool ARB_shading_language_100;
	bool ARB_shadow;
	bool ARB_shadow_ambient;
	bool ARB_shader_objects;
	bool ARB_sync;
	bool ARB_tessellation_shader;
	bool ARB_texture_border_clamp;
	bool ARB_texture_buffer_object;
	bool ARB_texture_buffer_object_rgb32;
	bool ARB_texture_compression;
	bool ARB_texture_compression_rgtc;
	bool ARB_texture_cube_map;
	bool ARB_texture_cube_map_array;
	bool ARB_texture_env_add;
	bool ARB_texture_env_combine;
	bool ARB_texture_env_crossbar;
	bool ARB_texture_env_dot3;
	bool ARB_texture_float;
	bool ARB_texture_gather;
	bool ARB_texture_mirrored_repeat;
	bool ARB_texture_multisample;
	bool ARB_texture_non_power_of_two;
	bool ARB_texture_query_lod;
	bool ARB_texture_rectangle;
	bool ARB_texture_rg;
	bool ARB_texture_rgb10_a2ui;
	bool ARB_texture_swizzle;
	bool ARB_timer_query;
	bool ARB_transform_feedback2;
	bool ARB_transform_feedback3;
	bool ARB_transpose_matrix;
	bool ARB_uniform_buffer_object;
	bool ARB_vertex_array_bgra;
	bool ARB_vertex_array_object;
	bool ARB_vertex_blend;
	bool ARB_vertex_buffer_object;
	bool ARB_vertex_program;
	bool ARB_vertex_shader;
	bool ARB_vertex_type_2_10_10_10_rev;
	bool ARB_window_pos;
	bool ARB_texture_compression_bptc;
	bool ARB_get_program_binary;
	bool ARB_separate_shader_objects;
	bool _3DFX_multisample;
	bool _3DFX_tbuffer;
	bool _3DFX_texture_compression_FXT1;
	bool ATI_draw_buffers;
	bool ATI_texture_compression_3dc;
	bool ATI_texture_float;
	bool ATI_texture_mirror_once;
	bool S3_s3tc;
	bool EXT_abgr;
	bool EXT_bgra;
	bool EXT_bindable_uniform;
	bool EXT_blend_color;
	bool EXT_blend_equation_separate;
	bool EXT_blend_func_separate;
	bool EXT_blend_logic_op;
	bool EXT_blend_minmax;
	bool EXT_blend_subtract;
	bool EXT_Cg_shader;
	bool EXT_clip_volume_hint;
	bool EXT_compiled_vertex_array;
	bool EXT_copy_texture;
	bool EXT_depth_bounds_test;
	bool EXT_draw_buffers2;
	bool EXT_draw_instanced;
	bool EXT_draw_range_elements;
	bool EXT_fog_coord;
	bool EXT_framebuffer_blit;
	bool EXT_framebuffer_multisample;
	bool EXT_framebuffer_object;
	bool EXT_framebuffer_sRGB;
	bool EXT_geometry_shader4;
	bool EXT_gpu_program_parameters;
	bool EXT_gpu_shader4;
	bool EXT_multi_draw_arrays;
	bool EXT_multisample;
	bool EXT_packed_depth_stencil;
	bool EXT_packed_float;
	bool EXT_packed_pixels;
	bool EXT_paletted_texture;
	bool EXT_pixel_buffer_object;
	bool EXT_polygon_offset;
	bool EXT_rescale_normal;
	bool EXT_secondary_color;
	bool EXT_separate_specular_color;
	bool EXT_shadow_funcs;
	bool EXT_shared_texture_palette;
	bool EXT_stencil_clear_tag;
	bool EXT_stencil_two_side;
	bool EXT_stencil_wrap;
	bool EXT_texture3D;
	bool EXT_texture_array;
	bool EXT_texture_buffer_object;
	bool EXT_texture_compression_latc;
	bool EXT_texture_compression_rgtc;
	bool EXT_texture_compression_s3tc;
	bool EXT_texture_cube_map;
	bool EXT_texture_edge_clamp;
	bool EXT_texture_env_add;
	bool EXT_texture_env_combine;
	bool EXT_texture_env_dot3;
	bool EXT_texture_filter_anisotropic;
	bool EXT_texture_integer;
	bool EXT_texture_lod;
	bool EXT_texture_lod_bias;
	bool EXT_texture_mirror_clamp;
	bool EXT_texture_object;
	bool EXT_texture_rectangle;
	bool EXT_texture_sRGB;
	bool EXT_texture_shared_exponent;
	bool EXT_timer_query;
	bool EXT_transform_feedback;
	bool EXT_vertex_array;
	bool EXT_texture_sRGB_decode;
	bool EXT_direct_state_access;
	bool EXT_texture_swizzle;
	bool HP_occlusion_test;
	bool IBM_rasterpos_clip;
	bool KTX_buffer_region;
	bool MESA_resize_buffers;
	bool NV_blend_square;
	bool NV_conditional_render;
	bool NV_copy_image;
	bool NV_depth_buffer_float;
	bool NV_fence;
	bool NV_float_buffer;
	bool NV_fog_distance;
	bool NV_geometry_program4;
	bool NV_light_max_exponent;
	bool NV_multisample_filter_hint;
	bool NV_occlusion_query;
	bool NV_point_sprite;
	bool NV_primitive_restart;
	bool NV_register_combiners;
	bool NV_shader_buffer_load;
	bool NV_texgen_reflection;
	bool NV_texture_compression_vtc;
	bool NV_texture_env_combine4;
	bool NV_texture_rectangle;
	bool NV_texture_shader;
	bool NV_texture_shader2;
	bool NV_texture_shader3;
	bool NV_transform_feedback;
	bool NV_vertex_array_range;
	bool NV_vertex_array_range2;
	bool NV_vertex_buffer_unified_memory;
	bool NV_vertex_program;
	bool SGI_color_matrix;
	bool SGIS_generate_mipmap;
	bool SGIS_multisample;
	bool SGIS_texture_border_clamp;
	bool SGIS_texture_color_mask;
	bool SGIS_texture_edge_clamp;
	bool SGIS_texture_lod;
	bool SGIX_depth_texture;
	bool SGIX_shadow;
	bool SGIX_shadow_ambient;
	bool AMD_vertex_shader_tessellator;
	bool WIN_swap_hint;
	bool ATI_meminfo;
	bool NVX_gpu_memory_info;
	bool NV_vdpau_interop;
	bool NV_path_rendering;
	bool GREMEDY_frame_terminator;
	bool GREMEDY_string_marker;
	bool AMDX_debug_output;
	bool ARB_debug_output;
	void __stdcall (*BindTexture)(unsigned target, unsigned texture);
	void __stdcall (*BlendFunc)(unsigned sfactor, unsigned dfactor);
	void __stdcall (*Clear)(unsigned mask);
	void __stdcall (*ClearColor)(float red, float green, float blue, float alpha);
	void __stdcall (*ClearDepth)(double depth);
	void __stdcall (*ClearStencil)(int s);
	void __stdcall (*ColorMask)(System::ByteBool red, System::ByteBool green, System::ByteBool blue, System::ByteBool alpha);
	void __stdcall (*CopyTexImage1D)(unsigned target, int level, unsigned internalFormat, int X, int y, int Width, int border);
	void __stdcall (*CopyTexImage2D)(unsigned target, int level, unsigned internalFormat, int X, int y, int Width, int Height, int border);
	void __stdcall (*CopyTexSubImage1D)(unsigned target, int level, int xoffset, int X, int y, int Width);
	void __stdcall (*CopyTexSubImage2D)(unsigned target, int level, int xoffset, int yoffset, int X, int y, int Width, int Height);
	void __stdcall (*CullFace)(unsigned mode);
	void __stdcall (*DeleteTextures)(int n, Opengltokens::PGLuint textures);
	void __stdcall (*DepthFunc)(unsigned func);
	void __stdcall (*DepthMask)(System::ByteBool flag);
	void __stdcall (*DepthRange)(double zNear, double zFar);
	void __stdcall (*Disable)(unsigned cap);
	void __stdcall (*DrawArrays)(unsigned mode, int First, int Count);
	void __stdcall (*DrawBuffer)(unsigned mode);
	void __stdcall (*DrawElements)(unsigned mode, int Count, unsigned atype, void * indices);
	void __stdcall (*Enable)(unsigned cap);
	void __stdcall (*Finish)(void);
	void __stdcall (*Flush)(void);
	void __stdcall (*FrontFace)(unsigned mode);
	void __stdcall (*GenTextures)(int n, Opengltokens::PGLuint textures);
	void __stdcall (*GetBooleanv)(unsigned pname, Opengltokens::PGLboolean params);
	void __stdcall (*GetDoublev)(unsigned pname, System::PDouble params);
	unsigned __stdcall (*GetError)(void);
	void __stdcall (*GetFloatv)(unsigned pname, System::PSingle params);
	void __stdcall (*GetIntegerv)(unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*GetPointerv)(unsigned pname, void *params);
	char * __stdcall (*GetString)(unsigned Name);
	void __stdcall (*GetTexImage)(unsigned target, int level, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*GetTexLevelParameterfv)(unsigned target, int level, unsigned pname, System::PSingle params);
	void __stdcall (*GetTexLevelParameteriv)(unsigned target, int level, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*GetTexParameterfv)(unsigned target, unsigned pname, System::PSingle params);
	void __stdcall (*GetTexParameteriv)(unsigned target, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*Hint)(unsigned target, unsigned mode);
	System::ByteBool __stdcall (*IsEnabled)(unsigned cap);
	System::ByteBool __stdcall (*IsTexture)(unsigned texture);
	void __stdcall (*LineWidth)(float Width);
	void __stdcall (*LogicOp)(unsigned opcode);
	void __stdcall (*PixelStoref)(unsigned pname, float param);
	void __stdcall (*PixelStorei)(unsigned pname, int param);
	void __stdcall (*PointSize)(float size);
	void __stdcall (*PolygonMode)(unsigned face, unsigned mode);
	void __stdcall (*PolygonOffset)(float factor, float units);
	void __stdcall (*ReadBuffer)(unsigned mode);
	void __stdcall (*ReadPixels)(int X, int y, int Width, int Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*Scissor)(int X, int y, int Width, int Height);
	void __stdcall (*StencilFunc)(unsigned func, int ref, unsigned mask);
	void __stdcall (*StencilMask)(unsigned mask);
	void __stdcall (*StencilOp)(unsigned fail, unsigned zfail, unsigned zpass);
	void __stdcall (*TexImage1D)(unsigned target, int level, int internalFormat, int Width, int border, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexImage2D)(unsigned target, int level, int internalFormat, int Width, int Height, int border, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexParameterf)(unsigned target, unsigned pname, float param);
	void __stdcall (*TexParameterfv)(unsigned target, unsigned pname, System::PSingle params);
	void __stdcall (*TexParameteri)(unsigned target, unsigned pname, int param);
	void __stdcall (*TexParameteriv)(unsigned target, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*TexSubImage1D)(unsigned target, int level, int xoffset, int Width, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*TexSubImage2D)(unsigned target, int level, int xoffset, int yoffset, int Width, int Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*Viewport)(int X, int y, int Width, int Height);
	void __stdcall (*Accum)(unsigned op, float Value);
	void __stdcall (*AlphaFunc)(unsigned func, float ref);
	System::ByteBool __stdcall (*AreTexturesResident)(int n, Opengltokens::PGLuint textures, Opengltokens::PGLboolean residences);
	void __stdcall (*ArrayElement)(int i);
	void __stdcall (*Begin_)(unsigned mode);
	void __stdcall (*Bitmap)(int Width, int Height, float xorig, float yorig, float xmove, float ymove, void * Bitmap);
	void __stdcall (*CallList)(unsigned list);
	void __stdcall (*CallLists)(int n, unsigned atype, void * lists);
	void __stdcall (*ClearAccum)(float red, float green, float blue, float alpha);
	void __stdcall (*ClearIndex)(float c);
	void __stdcall (*ClipPlane)(unsigned plane, System::PDouble equation);
	void __stdcall (*Color3b)(System::Int8 red, System::Int8 green, System::Int8 blue);
	void __stdcall (*Color3bv)(Opengltokens::PGLbyte v);
	void __stdcall (*Color3d)(double red, double green, double blue);
	void __stdcall (*Color3dv)(System::PDouble v);
	void __stdcall (*Color3f)(float red, float green, float blue);
	void __stdcall (*Color3fv)(System::PSingle v);
	void __stdcall (*Color3i)(int red, int green, int blue);
	void __stdcall (*Color3iv)(Opengltokens::PGLint v);
	void __stdcall (*Color3s)(short red, short green, short blue);
	void __stdcall (*Color3sv)(Opengltokens::PGLshort v);
	void __stdcall (*Color3ub)(System::Byte red, System::Byte green, System::Byte blue);
	void __stdcall (*Color3ubv)(System::PByte v);
	void __stdcall (*Color3ui)(unsigned red, unsigned green, unsigned blue);
	void __stdcall (*Color3uiv)(Opengltokens::PGLuint v);
	void __stdcall (*Color3us)(System::Word red, System::Word green, System::Word blue);
	void __stdcall (*Color3usv)(System::PWord v);
	void __stdcall (*Color4b)(System::Int8 red, System::Int8 green, System::Int8 blue, System::Int8 alpha);
	void __stdcall (*Color4bv)(Opengltokens::PGLbyte v);
	void __stdcall (*Color4d)(double red, double green, double blue, double alpha);
	void __stdcall (*Color4dv)(System::PDouble v);
	void __stdcall (*Color4f)(float red, float green, float blue, float alpha);
	void __stdcall (*Color4fv)(System::PSingle v);
	void __stdcall (*Color4i)(int red, int green, int blue, int alpha);
	void __stdcall (*Color4iv)(Opengltokens::PGLint v);
	void __stdcall (*Color4s)(short red, short green, short blue, short alpha);
	void __stdcall (*Color4sv)(short v);
	void __stdcall (*Color4ub)(System::Byte red, System::Byte green, System::Byte blue, System::Byte alpha);
	void __stdcall (*Color4ubv)(System::PByte v);
	void __stdcall (*Color4ui)(unsigned red, unsigned green, unsigned blue, unsigned alpha);
	void __stdcall (*Color4uiv)(Opengltokens::PGLuint v);
	void __stdcall (*Color4us)(System::Word red, System::Word green, System::Word blue, System::Word alpha);
	void __stdcall (*Color4usv)(System::PWord v);
	void __stdcall (*ColorMaterial)(unsigned face, unsigned mode);
	void __stdcall (*ColorPointer)(int size, unsigned atype, int stride, void * Data);
	void __stdcall (*CopyPixels)(int X, int y, int Width, int Height, unsigned atype);
	void __stdcall (*DeleteLists)(unsigned list, int range);
	void __stdcall (*DisableClientState)(unsigned aarray);
	void __stdcall (*DrawPixels)(int Width, int Height, unsigned format, unsigned atype, void * pixels);
	void __stdcall (*EdgeFlag)(System::ByteBool flag);
	void __stdcall (*EdgeFlagPointer)(int stride, void * Data);
	void __stdcall (*EdgeFlagv)(Opengltokens::PGLboolean flag);
	void __stdcall (*EnableClientState)(unsigned aarray);
	void __stdcall (*End_)(void);
	void __stdcall (*EndList)(void);
	void __stdcall (*EvalCoord1d)(double u);
	void __stdcall (*EvalCoord1dv)(System::PDouble u);
	void __stdcall (*EvalCoord1f)(float u);
	void __stdcall (*EvalCoord1fv)(System::PSingle u);
	void __stdcall (*EvalCoord2d)(double u, double v);
	void __stdcall (*EvalCoord2dv)(System::PDouble u);
	void __stdcall (*EvalCoord2f)(float u, float v);
	void __stdcall (*EvalCoord2fv)(System::PSingle u);
	void __stdcall (*EvalMesh1)(unsigned mode, int i1, int i2);
	void __stdcall (*EvalMesh2)(unsigned mode, int i1, int i2, int j1, int j2);
	void __stdcall (*EvalPoint1)(int i);
	void __stdcall (*EvalPoint2)(int i, int j);
	void __stdcall (*FeedbackBuffer)(int size, unsigned atype, System::PSingle buffer);
	void __stdcall (*Fogf)(unsigned pname, float param);
	void __stdcall (*Fogfv)(unsigned pname, System::PSingle params);
	void __stdcall (*Fogi)(unsigned pname, int param);
	void __stdcall (*Fogiv)(unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*Frustum)(double left, double right, double bottom, double top, double zNear, double zFar);
	unsigned __stdcall (*GenLists)(int range);
	void __stdcall (*GetClipPlane)(unsigned plane, System::PDouble equation);
	void __stdcall (*GetLightfv)(unsigned light, unsigned pname, System::PSingle params);
	void __stdcall (*GetLightiv)(unsigned light, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*GetMapdv)(unsigned target, unsigned query, System::PDouble v);
	void __stdcall (*GetMapfv)(unsigned target, unsigned query, System::PSingle v);
	void __stdcall (*GetMapiv)(unsigned target, unsigned query, Opengltokens::PGLint v);
	void __stdcall (*GetMaterialfv)(unsigned face, unsigned pname, System::PSingle params);
	void __stdcall (*GetMaterialiv)(unsigned face, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*GetPixelMapfv)(unsigned map, System::PSingle values);
	void __stdcall (*GetPixelMapuiv)(unsigned map, Opengltokens::PGLuint values);
	void __stdcall (*GetPixelMapusv)(unsigned map, System::PWord values);
	void __stdcall (*GetPolygonStipple)(System::PByte mask);
	void __stdcall (*GetTexEnvfv)(unsigned target, unsigned pname, System::PSingle params);
	void __stdcall (*GetTexEnviv)(unsigned target, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*GetTexGendv)(unsigned coord, unsigned pname, System::PDouble params);
	void __stdcall (*GetTexGenfv)(unsigned coord, unsigned pname, System::PSingle params);
	void __stdcall (*GetTexGeniv)(unsigned coord, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*IndexMask)(unsigned mask);
	void __stdcall (*IndexPointer)(unsigned atype, int stride, void * Data);
	void __stdcall (*Indexd)(double c);
	void __stdcall (*Indexdv)(System::PDouble c);
	void __stdcall (*Indexf)(float c);
	void __stdcall (*Indexfv)(System::PSingle c);
	void __stdcall (*Indexi)(int c);
	void __stdcall (*Indexiv)(Opengltokens::PGLint c);
	void __stdcall (*Indexs)(short c);
	void __stdcall (*Indexsv)(Opengltokens::PGLshort c);
	void __stdcall (*Indexub)(System::Byte c);
	void __stdcall (*Indexubv)(System::PByte c);
	void __stdcall (*InitNames)(void);
	void __stdcall (*InterleavedArrays)(unsigned format, int stride, void * Data);
	System::ByteBool __stdcall (*IsList)(unsigned list);
	void __stdcall (*LightModelf)(unsigned pname, float param);
	void __stdcall (*LightModelfv)(unsigned pname, System::PSingle params);
	void __stdcall (*LightModeli)(unsigned pname, int param);
	void __stdcall (*LightModeliv)(unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*Lightf)(unsigned light, unsigned pname, float param);
	void __stdcall (*Lightfv)(unsigned light, unsigned pname, System::PSingle params);
	void __stdcall (*Lighti)(unsigned light, unsigned pname, int param);
	void __stdcall (*Lightiv)(unsigned light, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*LineStipple)(int factor, System::Word pattern);
	void __stdcall (*ListBase)(unsigned base);
	void __stdcall (*LoadIdentity)(void);
	void __stdcall (*LoadMatrixd)(System::PDouble m);
	void __stdcall (*LoadMatrixf)(System::PSingle m);
	void __stdcall (*LoadName)(unsigned Name);
	void __stdcall (*Map1d)(unsigned target, double u1, double u2, int stride, int order, System::PDouble points);
	void __stdcall (*Map1f)(unsigned target, float u1, float u2, int stride, int order, System::PSingle points);
	void __stdcall (*Map2d)(unsigned target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, System::PDouble points);
	void __stdcall (*Map2f)(unsigned target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, System::PSingle points);
	void __stdcall (*MapGrid1d)(int un, double u1, double u2);
	void __stdcall (*MapGrid1f)(int un, float u1, float u2);
	void __stdcall (*MapGrid2d)(int un, double u1, double u2, int vn, double v1, double v2);
	void __stdcall (*MapGrid2f)(int un, float u1, float u2, int vn, float v1, float v2);
	void __stdcall (*Materialf)(unsigned face, unsigned pname, float param);
	void __stdcall (*Materialfv)(unsigned face, unsigned pname, System::PSingle params);
	void __stdcall (*Materiali)(unsigned face, unsigned pname, int param);
	void __stdcall (*Materialiv)(unsigned face, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*MatrixMode)(unsigned mode);
	void __stdcall (*MultMatrixd)(System::PDouble m);
	void __stdcall (*MultMatrixf)(System::PSingle m);
	void __stdcall (*NewList)(unsigned list, unsigned mode);
	void __stdcall (*Normal3b)(System::Int8 nx, System::Int8 ny, System::Int8 nz);
	void __stdcall (*Normal3bv)(Opengltokens::PGLbyte v);
	void __stdcall (*Normal3d)(double nx, double ny, double nz);
	void __stdcall (*Normal3dv)(System::PDouble v);
	void __stdcall (*Normal3f)(float nx, float ny, float nz);
	void __stdcall (*Normal3fv)(System::PSingle v);
	void __stdcall (*Normal3i)(int nx, int ny, int nz);
	void __stdcall (*Normal3iv)(Opengltokens::PGLint v);
	void __stdcall (*Normal3s)(short nx, short ny, short nz);
	void __stdcall (*Normal3sv)(Opengltokens::PGLshort v);
	void __stdcall (*NormalPointer)(unsigned atype, int stride, void * Data);
	void __stdcall (*Ortho)(double left, double right, double bottom, double top, double zNear, double zFar);
	void __stdcall (*PassThrough)(float token);
	void __stdcall (*PixelMapfv)(unsigned map, int mapsize, System::PSingle values);
	void __stdcall (*PixelMapuiv)(unsigned map, int mapsize, Opengltokens::PGLuint values);
	void __stdcall (*PixelMapusv)(unsigned map, int mapsize, System::PWord values);
	void __stdcall (*PixelTransferf)(unsigned pname, float param);
	void __stdcall (*PixelTransferi)(unsigned pname, int param);
	void __stdcall (*PixelZoom)(float xfactor, float yfactor);
	void __stdcall (*PolygonStipple)(System::PByte mask);
	void __stdcall (*PopAttrib)(void);
	void __stdcall (*PopClientAttrib)(void);
	void __stdcall (*PopMatrix)(void);
	void __stdcall (*PopName)(void);
	void __stdcall (*PrioritizeTextures)(int n, Opengltokens::PGLuint textures, Opengltokens::PGLclampf priorities);
	void __stdcall (*PushAttrib)(unsigned mask);
	void __stdcall (*PushClientAttrib)(unsigned mask);
	void __stdcall (*PushMatrix)(void);
	void __stdcall (*PushName)(unsigned Name);
	void __stdcall (*RasterPos2d)(double X, double y);
	void __stdcall (*RasterPos2dv)(System::PDouble v);
	void __stdcall (*RasterPos2f)(float X, float y);
	void __stdcall (*RasterPos2fv)(System::PSingle v);
	void __stdcall (*RasterPos2i)(int X, int y);
	void __stdcall (*RasterPos2iv)(Opengltokens::PGLint v);
	void __stdcall (*RasterPos2s)(Opengltokens::PGLshort X, Opengltokens::PGLshort y);
	void __stdcall (*RasterPos2sv)(Opengltokens::PGLshort v);
	void __stdcall (*RasterPos3d)(double X, double y, double z);
	void __stdcall (*RasterPos3dv)(System::PDouble v);
	void __stdcall (*RasterPos3f)(float X, float y, float z);
	void __stdcall (*RasterPos3fv)(System::PSingle v);
	void __stdcall (*RasterPos3i)(int X, int y, int z);
	void __stdcall (*RasterPos3iv)(Opengltokens::PGLint v);
	void __stdcall (*RasterPos3s)(short X, short y, short z);
	void __stdcall (*RasterPos3sv)(Opengltokens::PGLshort v);
	void __stdcall (*RasterPos4d)(double X, double y, double z, double w);
	void __stdcall (*RasterPos4dv)(System::PDouble v);
	void __stdcall (*RasterPos4f)(float X, float y, float z, float w);
	void __stdcall (*RasterPos4fv)(System::PSingle v);
	void __stdcall (*RasterPos4i)(int X, int y, int z, int w);
	void __stdcall (*RasterPos4iv)(Opengltokens::PGLint v);
	void __stdcall (*RasterPos4s)(short X, short y, short z, short w);
	void __stdcall (*RasterPos4sv)(Opengltokens::PGLshort v);
	void __stdcall (*Rectd)(double x1, double y1, double x2, double y2);
	void __stdcall (*Rectdv)(System::PDouble v1, System::PDouble v2);
	void __stdcall (*Rectf)(float x1, float y1, float x2, float y2);
	void __stdcall (*Rectfv)(System::PSingle v1, System::PSingle v2);
	void __stdcall (*Recti)(int x1, int y1, int x2, int y2);
	void __stdcall (*Rectiv)(Opengltokens::PGLint v1, Opengltokens::PGLint v2);
	void __stdcall (*Rects)(short x1, short y1, short x2, short y2);
	void __stdcall (*Rectsv)(Opengltokens::PGLshort v1, Opengltokens::PGLshort v2);
	int __stdcall (*RenderMode)(unsigned mode);
	void __stdcall (*Rotated)(double ane, double X, double y, double z);
	void __stdcall (*Rotatef)(float ane, float X, float y, float z);
	void __stdcall (*Scaled)(double X, double y, double z);
	void __stdcall (*Scalef)(float X, float y, float z);
	void __stdcall (*SelectBuffer)(int size, Opengltokens::PGLuint buffer);
	void __stdcall (*ShadeModel)(unsigned mode);
	void __stdcall (*TexCoord1d)(double s);
	void __stdcall (*TexCoord1dv)(System::PDouble v);
	void __stdcall (*TexCoord1f)(float s);
	void __stdcall (*TexCoord1fv)(System::PSingle v);
	void __stdcall (*TexCoord1i)(int s);
	void __stdcall (*TexCoord1iv)(Opengltokens::PGLint v);
	void __stdcall (*TexCoord1s)(short s);
	void __stdcall (*TexCoord1sv)(Opengltokens::PGLshort v);
	void __stdcall (*TexCoord2d)(double s, double t);
	void __stdcall (*TexCoord2dv)(System::PDouble v);
	void __stdcall (*TexCoord2f)(float s, float t);
	void __stdcall (*TexCoord2fv)(System::PSingle v);
	void __stdcall (*TexCoord2i)(int s, int t);
	void __stdcall (*TexCoord2iv)(Opengltokens::PGLint v);
	void __stdcall (*TexCoord2s)(short s, short t);
	void __stdcall (*TexCoord2sv)(Opengltokens::PGLshort v);
	void __stdcall (*TexCoord3d)(double s, double t, double r);
	void __stdcall (*TexCoord3dv)(System::PDouble v);
	void __stdcall (*TexCoord3f)(float s, float t, float r);
	void __stdcall (*TexCoord3fv)(System::PSingle v);
	void __stdcall (*TexCoord3i)(int s, int t, int r);
	void __stdcall (*TexCoord3iv)(Opengltokens::PGLint v);
	void __stdcall (*TexCoord3s)(short s, short t, short r);
	void __stdcall (*TexCoord3sv)(Opengltokens::PGLshort v);
	void __stdcall (*TexCoord4d)(double s, double t, double r, double q);
	void __stdcall (*TexCoord4dv)(System::PDouble v);
	void __stdcall (*TexCoord4f)(float s, float t, float r, float q);
	void __stdcall (*TexCoord4fv)(System::PSingle v);
	void __stdcall (*TexCoord4i)(int s, int t, int r, int q);
	void __stdcall (*TexCoord4iv)(Opengltokens::PGLint v);
	void __stdcall (*TexCoord4s)(short s, short t, short r, short q);
	void __stdcall (*TexCoord4sv)(Opengltokens::PGLshort v);
	void __stdcall (*TexCoordPointer)(int size, unsigned atype, int stride, void * Data);
	void __stdcall (*TexEnvf)(unsigned target, unsigned pname, float param);
	void __stdcall (*TexEnvfv)(unsigned target, unsigned pname, System::PSingle params);
	void __stdcall (*TexEnvi)(unsigned target, unsigned pname, int param);
	void __stdcall (*TexEnviv)(unsigned target, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*TexGend)(unsigned coord, unsigned pname, double param);
	void __stdcall (*TexGendv)(unsigned coord, unsigned pname, System::PDouble params);
	void __stdcall (*TexGenf)(unsigned coord, unsigned pname, float param);
	void __stdcall (*TexGenfv)(unsigned coord, unsigned pname, System::PSingle params);
	void __stdcall (*TexGeni)(unsigned coord, unsigned pname, int param);
	void __stdcall (*TexGeniv)(unsigned coord, unsigned pname, Opengltokens::PGLint params);
	void __stdcall (*Translated)(double X, double y, double z);
	void __stdcall (*Translatef)(float X, float y, float z);
	void __stdcall (*Vertex2d)(double X, double y);
	void __stdcall (*Vertex2dv)(System::PDouble v);
	void __stdcall (*Vertex2f)(float X, float y);
	void __stdcall (*Vertex2fv)(System::PSingle v);
	void __stdcall (*Vertex2i)(int X, int y);
	void __stdcall (*Vertex2iv)(Opengltokens::PGLint v);
	void __stdcall (*Vertex2s)(short X, short y);
	void __stdcall (*Vertex2sv)(Opengltokens::PGLshort v);
	void __stdcall (*Vertex3d)(double X, double y, double z);
	void __stdcall (*Vertex3dv)(System::PDouble v);
	void __stdcall (*Vertex3f)(float X, float y, float z);
	void __stdcall (*Vertex3fv)(System::PSingle v);
	void __stdcall (*Vertex3i)(int X, int y, int z);
	void __stdcall (*Vertex3iv)(Opengltokens::PGLint v);
	void __stdcall (*Vertex3s)(short X, short y, short z);
	void __stdcall (*Vertex3sv)(Opengltokens::PGLshort v);
	void __stdcall (*Vertex4d)(double X, double y, double z, double w);
	void __stdcall (*Vertex4dv)(System::PDouble v);
	void __stdcall (*Vertex4f)(float X, float y, float z, float w);
	void __stdcall (*Vertex4fv)(System::PSingle v);
	void __stdcall (*Vertex4i)(int X, int y, int z, int w);
	void __stdcall (*Vertex4iv)(Opengltokens::PGLint v);
	void __stdcall (*Vertex4s)(short X, short y, short z, short w);
	void __stdcall (*Vertex4sv)(Opengltokens::PGLshort v);
	void __stdcall (*VertexPointer)(int size, unsigned atype, int stride, void * Data);
	Opengltokens::PFNGLBLENDCOLORPROC BlendColor;
	Opengltokens::PFNGLBLENDEQUATIONPROC BlendEquation;
	Opengltokens::PFNGLDRAWRANGEELEMENTSPROC DrawRangeElements;
	Opengltokens::PFNGLTEXIMAGE3DPROC TexImage3D;
	Opengltokens::PFNGLTEXSUBIMAGE3DPROC TexSubImage3D;
	Opengltokens::PFNGLCOPYTEXSUBIMAGE3DPROC CopyTexSubImage3D;
	Opengltokens::PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate;
	Opengltokens::PFNGLMULTIDRAWARRAYSPROC MultiDrawArrays;
	Opengltokens::PFNGLMULTIDRAWELEMENTSPROC MultiDrawElements;
	Opengltokens::PFNGLPOINTPARAMETERFPROC PointParameterf;
	Opengltokens::PFNGLPOINTPARAMETERFVPROC PointParameterfv;
	Opengltokens::PFNGLPOINTPARAMETERIPROC PointParameteri;
	Opengltokens::PFNGLPOINTPARAMETERIVPROC PointParameteriv;
	Opengltokens::PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate;
	Opengltokens::PFNGLDRAWBUFFERSPROC DrawBuffers;
	Opengltokens::PFNGLSTENCILOPSEPARATEPROC StencilOpSeparate;
	Opengltokens::PFNGLSTENCILFUNCSEPARATEPROC StencilFuncSeparate;
	Opengltokens::PFNGLSTENCILMASKSEPARATEPROC StencilMaskSeparate;
	Opengltokens::PFNGLLOCKARRAYSEXTPROC LockArrays;
	Opengltokens::PFNGLUNLOCKARRAYSEXTPROC UnlockArrays;
	Opengltokens::PFNGLBINDBUFFERPROC BindBuffer;
	Opengltokens::PFNGLDELETEBUFFERSPROC DeleteBuffers;
	Opengltokens::PFNGLGENBUFFERSPROC GenBuffers;
	Opengltokens::PFNGLISBUFFERPROC IsBuffer;
	Opengltokens::PFNGLBUFFERDATAPROC BufferData;
	Opengltokens::PFNGLBUFFERSUBDATAPROC BufferSubData;
	Opengltokens::PFNGLGETBUFFERSUBDATAPROC GetBufferSubData;
	Opengltokens::PFNGLMAPBUFFERPROC MapBuffer;
	Opengltokens::PFNGLUNMAPBUFFERPROC UnmapBuffer;
	Opengltokens::PFNGLGETBUFFERPARAMETERIVPROC GetBufferParameteriv;
	Opengltokens::PFNGLGETBUFFERPOINTERVPROC GetBufferPointerv;
	Opengltokens::PFNGLMAPBUFFERRANGEPROC MapBufferRange;
	Opengltokens::PFNGLFLUSHMAPPEDBUFFERRANGEPROC FlushMappedBufferRange;
	Opengltokens::PFNGLBINDBUFFERRANGEPROC BindBufferRange;
	Opengltokens::PFNGLBINDBUFFEROFFSETEXTPROC BindBufferOffset;
	Opengltokens::PFNGLBINDBUFFERBASEPROC BindBufferBase;
	Opengltokens::PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC TransformFeedbackAttribs;
	Opengltokens::PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC TransformFeedbackVaryingsNV;
	Opengltokens::PFNGLTRANSFORMFEEDBACKVARYINGSPROC TransformFeedbackVaryings;
	Opengltokens::PFNGLGETTRANSFORMFEEDBACKVARYINGPROC GetTransformFeedbackVarying;
	Opengltokens::PFNGLBEGINTRANSFORMFEEDBACKPROC BeginTransformFeedback;
	Opengltokens::PFNGLENDTRANSFORMFEEDBACKPROC EndTransformFeedback;
	Opengltokens::PFNGLTEXBUFFERPROC TexBuffer;
	Opengltokens::PFNGLCLEARBUFFERIVPROC ClearBufferiv;
	Opengltokens::PFNGLCLEARBUFFERUIVPROC ClearBufferuiv;
	Opengltokens::PFNGLCLEARBUFFERFVPROC ClearBufferfv;
	Opengltokens::PFNGLCLEARBUFFERFIPROC ClearBufferfi;
	Opengltokens::PFNGLGETSTRINGIPROC GetStringi;
	Opengltokens::PFNGLBINDVERTEXARRAYPROC BindVertexArray;
	Opengltokens::PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays;
	Opengltokens::PFNGLGENVERTEXARRAYSPROC GenVertexArrays;
	Opengltokens::PFNGLISVERTEXARRAYPROC IsVertexArray;
	Opengltokens::PFNGLFLUSHVERTEXARRAYRANGENVPROC FlushVertexArrayRangeNV;
	Opengltokens::PFNGLVERTEXARRAYRANGENVPROC VertexArrayRangeNV;
	Opengltokens::PFNGLGETUNIFORMINDICESPROC GetUniformIndices;
	Opengltokens::PFNGLGETACTIVEUNIFORMSIVPROC GetActiveUniformsiv;
	Opengltokens::PFNGLGETACTIVEUNIFORMNAMEPROC GetActiveUniformName;
	Opengltokens::PFNGLGETUNIFORMBLOCKINDEXPROC GetUniformBlockIndex;
	Opengltokens::PFNGLGETACTIVEUNIFORMBLOCKIVPROC GetActiveUniformBlockiv;
	Opengltokens::PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC GetActiveUniformBlockName;
	Opengltokens::PFNGLUNIFORMBLOCKBINDINGPROC UniformBlockBinding;
	Opengltokens::PFNGLCOPYBUFFERSUBDATAPROC CopyBufferSubData;
	Opengltokens::PFNGLUNIFORMBUFFEREXTPROC UniformBuffer;
	Opengltokens::PFNGLGETUNIFORMBUFFERSIZEEXTPROC GetUniformBufferSize;
	Opengltokens::PFNGLGETUNIFORMOFFSETEXTPROC GetUniformOffset;
	Opengltokens::PFNGLPRIMITIVERESTARTINDEXPROC PrimitiveRestartIndex;
	Opengltokens::PFNGLDRAWELEMENTSBASEVERTEXPROC DrawElementsBaseVertex;
	Opengltokens::PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC DrawRangeElementsBaseVertex;
	Opengltokens::PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC DrawElementsInstancedBaseVertex;
	Opengltokens::PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC MultiDrawElementsBaseVertex;
	Opengltokens::PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced;
	Opengltokens::PFNGLDRAWELEMENTSINSTANCEDPROC DrawElementsInstanced;
	Opengltokens::PFNGLVERTEXATTRIB1DPROC VertexAttrib1d;
	Opengltokens::PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv;
	Opengltokens::PFNGLVERTEXATTRIB1FPROC VertexAttrib1f;
	Opengltokens::PFNGLVERTEXATTRIB1FVPROC VertexAttrib1fv;
	Opengltokens::PFNGLVERTEXATTRIB1SPROC VertexAttrib1s;
	Opengltokens::PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv;
	Opengltokens::PFNGLVERTEXATTRIB2DPROC VertexAttrib2d;
	Opengltokens::PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv;
	Opengltokens::PFNGLVERTEXATTRIB2FPROC VertexAttrib2f;
	Opengltokens::PFNGLVERTEXATTRIB2FVPROC VertexAttrib2fv;
	Opengltokens::PFNGLVERTEXATTRIB2SPROC VertexAttrib2s;
	Opengltokens::PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv;
	Opengltokens::PFNGLVERTEXATTRIB3DPROC VertexAttrib3d;
	Opengltokens::PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv;
	Opengltokens::PFNGLVERTEXATTRIB3FPROC VertexAttrib3f;
	Opengltokens::PFNGLVERTEXATTRIB3FVPROC VertexAttrib3fv;
	Opengltokens::PFNGLVERTEXATTRIB3SPROC VertexAttrib3s;
	Opengltokens::PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv;
	Opengltokens::PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv;
	Opengltokens::PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv;
	Opengltokens::PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv;
	Opengltokens::PFNGLVERTEXATTRIB4NUBPROC VertexAttrib4Nub;
	Opengltokens::PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv;
	Opengltokens::PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv;
	Opengltokens::PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv;
	Opengltokens::PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv;
	Opengltokens::PFNGLVERTEXATTRIB4DPROC VertexAttrib4d;
	Opengltokens::PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv;
	Opengltokens::PFNGLVERTEXATTRIB4FPROC VertexAttrib4f;
	Opengltokens::PFNGLVERTEXATTRIB4FVPROC VertexAttrib4fv;
	Opengltokens::PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv;
	Opengltokens::PFNGLVERTEXATTRIB4SPROC VertexAttrib4s;
	Opengltokens::PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv;
	Opengltokens::PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv;
	Opengltokens::PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv;
	Opengltokens::PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv;
	Opengltokens::PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer;
	Opengltokens::PFNGLVERTEXATTRIBI1IPROC VertexAttribI1i;
	Opengltokens::PFNGLVERTEXATTRIBI2IPROC VertexAttribI2i;
	Opengltokens::PFNGLVERTEXATTRIBI3IPROC VertexAttribI3i;
	Opengltokens::PFNGLVERTEXATTRIBI4IPROC VertexAttribI4i;
	Opengltokens::PFNGLVERTEXATTRIBI1UIPROC VertexAttribI1ui;
	Opengltokens::PFNGLVERTEXATTRIBI2UIPROC VertexAttribI2ui;
	Opengltokens::PFNGLVERTEXATTRIBI3UIPROC VertexAttribI3ui;
	Opengltokens::PFNGLVERTEXATTRIBI4UIPROC VertexAttribI4ui;
	Opengltokens::PFNGLVERTEXATTRIBI1IVPROC VertexAttribI1iv;
	Opengltokens::PFNGLVERTEXATTRIBI2IVPROC VertexAttribI2iv;
	Opengltokens::PFNGLVERTEXATTRIBI3IVPROC VertexAttribI3iv;
	Opengltokens::PFNGLVERTEXATTRIBI4IVPROC VertexAttribI4iv;
	Opengltokens::PFNGLVERTEXATTRIBI1UIVPROC VertexAttribI1uiv;
	Opengltokens::PFNGLVERTEXATTRIBI2UIVPROC VertexAttribI2uiv;
	Opengltokens::PFNGLVERTEXATTRIBI3UIVPROC VertexAttribI3uiv;
	Opengltokens::PFNGLVERTEXATTRIBI4UIVPROC VertexAttribI4uiv;
	Opengltokens::PFNGLVERTEXATTRIBI4BVPROC VertexAttribI4bv;
	Opengltokens::PFNGLVERTEXATTRIBI4SVPROC VertexAttribI4sv;
	Opengltokens::PFNGLVERTEXATTRIBI4UBVPROC VertexAttribI4ubv;
	Opengltokens::PFNGLVERTEXATTRIBI4USVPROC VertexAttribI4usv;
	Opengltokens::PFNGLVERTEXATTRIBIPOINTERPROC VertexAttribIPointer;
	Opengltokens::PFNGLGETVERTEXATTRIBIIVPROC GetVertexAttribIiv;
	Opengltokens::PFNGLGETVERTEXATTRIBIUIVPROC GetVertexAttribIuiv;
	Opengltokens::PFNGLUNIFORM1UIPROC Uniform1ui;
	Opengltokens::PFNGLUNIFORM2UIPROC Uniform2ui;
	Opengltokens::PFNGLUNIFORM3UIPROC Uniform3ui;
	Opengltokens::PFNGLUNIFORM4UIPROC Uniform4ui;
	Opengltokens::PFNGLUNIFORM1UIVPROC Uniform1uiv;
	Opengltokens::PFNGLUNIFORM2UIVPROC Uniform2uiv;
	Opengltokens::PFNGLUNIFORM3UIVPROC Uniform3uiv;
	Opengltokens::PFNGLUNIFORM4UIVPROC Uniform4uiv;
	Opengltokens::PFNGLGETUNIFORMUIVPROC GetUniformuiv;
	Opengltokens::PFNGLBINDFRAGDATALOCATIONPROC BindFragDataLocation;
	Opengltokens::PFNGLGETFRAGDATALOCATIONPROC GetFragDataLocation;
	Opengltokens::PFNGLCLAMPCOLORPROC ClampColor;
	Opengltokens::PFNGLCOLORMASKIPROC ColorMaski;
	Opengltokens::PFNGLGETBOOLEANI_VPROC GetBooleani_v;
	Opengltokens::PFNGLGETINTEGERI_VPROC GetIntegeri_v;
	Opengltokens::PFNGLENABLEIPROC Enablei;
	Opengltokens::PFNGLDISABLEIPROC Disablei;
	Opengltokens::PFNGLISENABLEDIPROC IsEnabledi;
	Opengltokens::PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray;
	Opengltokens::PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;
	Opengltokens::PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor;
	Opengltokens::PFNGLCLEARCOLORIIEXTPROC ClearColorIi;
	Opengltokens::PFNGLCLEARCOLORIUIEXTPROC ClearColorIui;
	Opengltokens::PFNGLTEXPARAMETERIIVPROC TexParameterIiv;
	Opengltokens::PFNGLTEXPARAMETERIUIVPROC TexParameterIuiv;
	Opengltokens::PFNGLGETTEXPARAMETERIIVPROC GetTexParameterIiv;
	Opengltokens::PFNGLGETTEXPARAMETERIUIVPROC GetTexParameterIuiv;
	Opengltokens::PFNGLPATCHPARAMETERIPROC PatchParameteri;
	Opengltokens::PFNGLPATCHPARAMETERFVPROC PatchParameterfv;
	Opengltokens::PFNGLBUFFERADDRESSRANGENVPROC BufferAddressRangeNV;
	Opengltokens::PFNGLVERTEXFORMATNVPROC VertexFormatNV;
	Opengltokens::PFNGLNORMALFORMATNVPROC NormalFormatNV;
	Opengltokens::PFNGLCOLORFORMATNVPROC ColorFormatNV;
	Opengltokens::PFNGLINDEXFORMATNVPROC IndexFormatNV;
	Opengltokens::PFNGLTEXCOORDFORMATNVPROC TexCoordFormatNV;
	Opengltokens::PFNGLEDGEFLAGFORMATNVPROC EdgeFlagFormatNV;
	Opengltokens::PFNGLSECONDARYCOLORFORMATNVPROC SecondaryColorFormatNV;
	Opengltokens::PFNGLFOGCOORDFORMATNVPROC FogCoordFormatNV;
	Opengltokens::PFNGLVERTEXATTRIBFORMATNVPROC VertexAttribFormatNV;
	Opengltokens::PFNGLVERTEXATTRIBIFORMATNVPROC VertexAttribIFormatNV;
	Opengltokens::PFNGLGETINTEGERUI64I_VNVPROC GetIntegerui64i_vNV;
	Opengltokens::PGNGLGETBUFFERPARAMETERUI64VNV GetBufferParameterui64vNV;
	Opengltokens::PFNGLMAKEBUFFERRESIDENTNVPROC MakeBufferResidentNV;
	Opengltokens::PFNGLMAKEBUFFERNONRESIDENTNVPROC MakeBufferNonResidentNV;
	Opengltokens::PFNGLISBUFFERRESIDENTNVPROC IsBufferResidentNV;
	Opengltokens::PFNGLMAKENAMEDBUFFERRESIDENTNVPROC MakeNamedBufferResidentNV;
	Opengltokens::PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC MakeNamedBufferNonResidentNV;
	Opengltokens::PFNGLISNAMEDBUFFERRESIDENTNVPROC IsNamedBufferResidentNV;
	Opengltokens::PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC GetNamedBufferParameterui64vNV;
	Opengltokens::PFNGLGETINTEGERUI64VNVPROC GetIntegerui64vNV;
	Opengltokens::PFNGLUNIFORMUI64NVPROC Uniformui64NV;
	Opengltokens::PFNGLUNIFORMUI64VNVPROC Uniformui64vNV;
	Opengltokens::PFNGLGETUNIFORMUI64VNVPROC GetUniformui64vNV;
	Opengltokens::PFNGLPROGRAMUNIFORMUI64NVPROC ProgramUniformui64NV;
	Opengltokens::PFNGLPROGRAMUNIFORMUI64VNVPROC ProgramUniformui64vNV;
	Opengltokens::PFNGLDELETEOBJECTARBPROC DeleteObject;
	Opengltokens::PFNGLGETHANDLEARBPROC GetHandle;
	Opengltokens::PFNGLDETACHSHADERPROC DetachShader;
	Opengltokens::PFNGLCREATESHADERPROC CreateShader;
	Opengltokens::PFNGLSHADERSOURCEPROC ShaderSource;
	Opengltokens::PFNGLCOMPILESHADERPROC CompileShader;
	Opengltokens::PFNGLCREATEPROGRAMPROC CreateProgram;
	Opengltokens::PFNGLATTACHSHADERPROC AttachShader;
	Opengltokens::PFNGLLINKPROGRAMPROC LinkProgram;
	Opengltokens::PFNGLUSEPROGRAMPROC UseProgram;
	Opengltokens::PFNGLVALIDATEPROGRAMPROC ValidateProgram;
	Opengltokens::PFNGLUNIFORM1FPROC Uniform1f;
	Opengltokens::PFNGLUNIFORM2FPROC Uniform2f;
	Opengltokens::PFNGLUNIFORM3FPROC Uniform3f;
	Opengltokens::PFNGLUNIFORM4FPROC Uniform4f;
	Opengltokens::PFNGLUNIFORM1IPROC Uniform1i;
	Opengltokens::PFNGLUNIFORM2IPROC Uniform2i;
	Opengltokens::PFNGLUNIFORM3IPROC Uniform3i;
	Opengltokens::PFNGLUNIFORM4IPROC Uniform4i;
	Opengltokens::PFNGLUNIFORM1FVPROC Uniform1fv;
	Opengltokens::PFNGLUNIFORM2FVPROC Uniform2fv;
	Opengltokens::PFNGLUNIFORM3FVPROC Uniform3fv;
	Opengltokens::PFNGLUNIFORM4FVPROC Uniform4fv;
	Opengltokens::PFNGLUNIFORM1IVPROC Uniform1iv;
	Opengltokens::PFNGLUNIFORM2IVPROC Uniform2iv;
	Opengltokens::PFNGLUNIFORM3IVPROC Uniform3iv;
	Opengltokens::PFNGLUNIFORM4IVPROC Uniform4iv;
	Opengltokens::PFNGLUNIFORMMATRIX2FVPROC UniformMatrix2fv;
	Opengltokens::PFNGLUNIFORMMATRIX3FVPROC UniformMatrix3fv;
	Opengltokens::PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv;
	Opengltokens::PFNGLGETOBJECTPARAMETERFVARBPROC GetObjectParameterfv;
	Opengltokens::PFNGLGETOBJECTPARAMETERIVARBPROC GetObjectParameteriv;
	Opengltokens::PFNGLGETINFOLOGARBPROC GetInfoLog;
	Opengltokens::PFNGLGETATTACHEDOBJECTSARBPROC GetAttachedObjects;
	Opengltokens::PFNGLGETACTIVEATTRIBPROC GetActiveAttrib;
	Opengltokens::PFNGLGETACTIVEUNIFORMPROC GetActiveUniform;
	Opengltokens::PFNGLGETATTACHEDSHADERSPROC GetAttachedShaders;
	Opengltokens::PFNGLGETATTRIBLOCATIONPROC GetAttribLocation;
	Opengltokens::PFNGLGETPROGRAMIVPROC GetProgramiv;
	Opengltokens::PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog;
	Opengltokens::PFNGLGETSHADERIVPROC GetShaderiv;
	Opengltokens::PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog;
	Opengltokens::PFNGLGETSHADERSOURCEPROC GetShaderSource;
	Opengltokens::PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation;
	Opengltokens::PFNGLGETUNIFORMFVPROC GetUniformfv;
	Opengltokens::PFNGLGETUNIFORMIVPROC GetUniformiv;
	Opengltokens::PFNGLGETVERTEXATTRIBDVPROC GetVertexAttribdv;
	Opengltokens::PFNGLGETVERTEXATTRIBFVPROC GetVertexAttribfv;
	Opengltokens::PFNGLGETVERTEXATTRIBIVPROC GetVertexAttribiv;
	Opengltokens::PFNGLGETVERTEXATTRIBPOINTERVPROC GetVertexAttribPointerv;
	Opengltokens::PFNGLISPROGRAMPROC IsProgram;
	Opengltokens::PFNGLISSHADERPROC IsShader;
	Opengltokens::PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation;
	Opengltokens::PFNGLBINDFRAGDATALOCATIONINDEXEDPROC BindFragDataLocationIndexed;
	Opengltokens::PFNGLGETFRAGDATAINDEXPROC GetFragDataIndex;
	Opengltokens::PFNGLGETVARYINGLOCATIONNVPROC GetVaryingLocation;
	Opengltokens::PFNGLGETACTIVEVARYINGNVPROC GetActiveVarying;
	Opengltokens::PFNGLACTIVEVARYINGNVPROC ActiveVarying;
	Opengltokens::PFNGLGETPROGRAMBINARYPROC GetProgramBinary;
	Opengltokens::PFNGLPROGRAMBINARYPROC ProgramBinary;
	Opengltokens::PFNGLUSEPROGRAMSTAGESPROC UseProgramStages;
	Opengltokens::PFNGLACTIVESHADERPROGRAMPROC ActiveShaderProgram;
	Opengltokens::PFNGLCREATESHADERPROGRAMVPROC CreateShaderProgramv;
	Opengltokens::PFNGLBINDPROGRAMPIPELINEPROC BindProgramPipeline;
	Opengltokens::PFNGLDELETEPROGRAMPIPELINESPROC DeleteProgramPipelines;
	Opengltokens::PFNGLGENPROGRAMPIPELINESPROC GenProgramPipelines;
	Opengltokens::PFNGLISPROGRAMPIPELINEPROC IsProgramPipeline;
	Opengltokens::PFNGLGETPROGRAMPIPELINEIVPROC GetProgramPipelineiv;
	Opengltokens::PFNGLPROGRAMUNIFORM1IPROC ProgramUniform1i;
	Opengltokens::PFNGLPROGRAMUNIFORM1IVPROC ProgramUniform1iv;
	Opengltokens::PFNGLPROGRAMUNIFORM1FPROC ProgramUniform1f;
	Opengltokens::PFNGLPROGRAMUNIFORM1FVPROC ProgramUniform1fv;
	Opengltokens::PFNGLPROGRAMUNIFORM1DPROC ProgramUniform1d;
	Opengltokens::PFNGLPROGRAMUNIFORM1DVPROC ProgramUniform1dv;
	Opengltokens::PFNGLPROGRAMUNIFORM1UIPROC ProgramUniform1ui;
	Opengltokens::PFNGLPROGRAMUNIFORM1UIVPROC ProgramUniform1uiv;
	Opengltokens::PFNGLPROGRAMUNIFORM2IPROC ProgramUniform2i;
	Opengltokens::PFNGLPROGRAMUNIFORM2IVPROC ProgramUniform2iv;
	Opengltokens::PFNGLPROGRAMUNIFORM2FPROC ProgramUniform2f;
	Opengltokens::PFNGLPROGRAMUNIFORM2FVPROC ProgramUniform2fv;
	Opengltokens::PFNGLPROGRAMUNIFORM2DPROC ProgramUniform2d;
	Opengltokens::PFNGLPROGRAMUNIFORM2DVPROC ProgramUniform2dv;
	Opengltokens::PFNGLPROGRAMUNIFORM2UIPROC ProgramUniform2ui;
	Opengltokens::PFNGLPROGRAMUNIFORM2UIVPROC ProgramUniform2uiv;
	Opengltokens::PFNGLPROGRAMUNIFORM3IPROC ProgramUniform3i;
	Opengltokens::PFNGLPROGRAMUNIFORM3IVPROC ProgramUniform3iv;
	Opengltokens::PFNGLPROGRAMUNIFORM3FPROC ProgramUniform3f;
	Opengltokens::PFNGLPROGRAMUNIFORM3FVPROC ProgramUniform3fv;
	Opengltokens::PFNGLPROGRAMUNIFORM3DPROC ProgramUniform3d;
	Opengltokens::PFNGLPROGRAMUNIFORM3DVPROC ProgramUniform3dv;
	Opengltokens::PFNGLPROGRAMUNIFORM3UIPROC ProgramUniform3ui;
	Opengltokens::PFNGLPROGRAMUNIFORM3UIVPROC ProgramUniform3uiv;
	Opengltokens::PFNGLPROGRAMUNIFORM4IPROC ProgramUniform4i;
	Opengltokens::PFNGLPROGRAMUNIFORM4IVPROC ProgramUniform4iv;
	Opengltokens::PFNGLPROGRAMUNIFORM4FPROC ProgramUniform4f;
	Opengltokens::PFNGLPROGRAMUNIFORM4FVPROC ProgramUniform4fv;
	Opengltokens::PFNGLPROGRAMUNIFORM4DPROC ProgramUniform4d;
	Opengltokens::PFNGLPROGRAMUNIFORM4DVPROC ProgramUniform4dv;
	Opengltokens::PFNGLPROGRAMUNIFORM4UIPROC ProgramUniform4ui;
	Opengltokens::PFNGLPROGRAMUNIFORM4UIVPROC ProgramUniform4uiv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2FVPROC ProgramUniformMatrix2fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3FVPROC ProgramUniformMatrix3fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4FVPROC ProgramUniformMatrix4fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2DVPROC ProgramUniformMatrix2dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3DVPROC ProgramUniformMatrix3dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4DVPROC ProgramUniformMatrix4dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC ProgramUniformMatrix2x3fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC ProgramUniformMatrix3x2fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC ProgramUniformMatrix2x4fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC ProgramUniformMatrix4x2fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC ProgramUniformMatrix3x4fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC ProgramUniformMatrix4x3fv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC ProgramUniformMatrix2x3dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC ProgramUniformMatrix3x2dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC ProgramUniformMatrix2x4dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC ProgramUniformMatrix4x2dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC ProgramUniformMatrix3x4dv;
	Opengltokens::PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC ProgramUniformMatrix4x3dv;
	Opengltokens::PFNGLVALIDATEPROGRAMPIPELINEPROC ValidateProgramPipeline;
	Opengltokens::PFNGLGETPROGRAMPIPELINEINFOLOGPROC GetProgramPipelineInfoLog;
	Opengltokens::PFNGLISRENDERBUFFERPROC IsRenderbuffer;
	Opengltokens::PFNGLBINDRENDERBUFFERPROC BindRenderbuffer;
	Opengltokens::PFNGLDELETERENDERBUFFERSPROC DeleteRenderbuffers;
	Opengltokens::PFNGLGENRENDERBUFFERSPROC GenRenderbuffers;
	Opengltokens::PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage;
	Opengltokens::PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample;
	Opengltokens::PFNGLGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv;
	Opengltokens::PFNGLISFRAMEBUFFERPROC IsFramebuffer;
	Opengltokens::PFNGLBINDFRAMEBUFFERPROC BindFramebuffer;
	Opengltokens::PFNGLDELETEFRAMEBUFFERSPROC DeleteFramebuffers;
	Opengltokens::PFNGLGENFRAMEBUFFERSPROC GenFramebuffers;
	Opengltokens::PFNGLCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus;
	Opengltokens::PFNGLFRAMEBUFFERTEXTUREPROC FramebufferTexture;
	Opengltokens::PFNGLFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D;
	Opengltokens::PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D;
	Opengltokens::PFNGLFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D;
	Opengltokens::PFNGLFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer;
	Opengltokens::PFNGLFRAMEBUFFERTEXTUREFACEARBPROC FramebufferTextureFace;
	Opengltokens::PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer;
	Opengltokens::PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GetFramebufferAttachmentParameteriv;
	Opengltokens::PFNGLBLITFRAMEBUFFERPROC BlitFramebuffer;
	Opengltokens::PFNGLGENERATEMIPMAPPROC GenerateMipmap;
	Opengltokens::PFNGLGENQUERIESPROC GenQueries;
	Opengltokens::PFNGLDELETEQUERIESPROC DeleteQueries;
	Opengltokens::PFNGLISQUERYPROC IsQuery;
	Opengltokens::PFNGLBEGINQUERYPROC BeginQuery;
	Opengltokens::PFNGLENDQUERYPROC EndQuery;
	Opengltokens::PFNGLGETQUERYIVPROC GetQueryiv;
	Opengltokens::PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv;
	Opengltokens::PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv;
	Opengltokens::PFNGLQUERYCOUNTERPROC QueryCounter;
	Opengltokens::PFNGLGETQUERYOBJECTI64VPROC GetQueryObjecti64v;
	Opengltokens::PFNGLGETQUERYOBJECTUI64VPROC GetQueryObjectui64v;
	Opengltokens::PFNGLACTIVETEXTUREPROC ActiveTexture;
	Opengltokens::PFNGLSAMPLECOVERAGEPROC SampleCoverage;
	Opengltokens::PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D;
	Opengltokens::PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D;
	Opengltokens::PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D;
	Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D;
	Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D;
	Opengltokens::PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D;
	Opengltokens::PFNGLGETCOMPRESSEDTEXIMAGEPROC GetCompressedTexImage;
	Opengltokens::PFNGLCLIENTACTIVETEXTUREPROC ClientActiveTexture;
	Opengltokens::PFNGLMULTITEXCOORD1DPROC MultiTexCoord1d;
	Opengltokens::PFNGLMULTITEXCOORD1DVPROC MultiTexCoord1dV;
	Opengltokens::PFNGLMULTITEXCOORD1FPROC MultiTexCoord1f;
	Opengltokens::PFNGLMULTITEXCOORD1FVPROC MultiTexCoord1fv;
	Opengltokens::PFNGLMULTITEXCOORD1IPROC MultiTexCoord1i;
	Opengltokens::PFNGLMULTITEXCOORD1IVPROC MultiTexCoord1iv;
	Opengltokens::PFNGLMULTITEXCOORD1SPROC MultiTexCoord1s;
	Opengltokens::PFNGLMULTITEXCOORD1SVPROC MultiTexCoord1sv;
	Opengltokens::PFNGLMULTITEXCOORD2DPROC MultiTexCoord2d;
	Opengltokens::PFNGLMULTITEXCOORD2DVPROC MultiTexCoord2dv;
	Opengltokens::PFNGLMULTITEXCOORD2FPROC MultiTexCoord2f;
	Opengltokens::PFNGLMULTITEXCOORD2FVPROC MultiTexCoord2fv;
	Opengltokens::PFNGLMULTITEXCOORD2IPROC MultiTexCoord2i;
	Opengltokens::PFNGLMULTITEXCOORD2IVPROC MultiTexCoord2iv;
	Opengltokens::PFNGLMULTITEXCOORD2SPROC MultiTexCoord2s;
	Opengltokens::PFNGLMULTITEXCOORD2SVPROC MultiTexCoord2sv;
	Opengltokens::PFNGLMULTITEXCOORD3DPROC MultiTexCoord3d;
	Opengltokens::PFNGLMULTITEXCOORD3DVPROC MultiTexCoord3dv;
	Opengltokens::PFNGLMULTITEXCOORD3FPROC MultiTexCoord3f;
	Opengltokens::PFNGLMULTITEXCOORD3FVPROC MultiTexCoord3fv;
	Opengltokens::PFNGLMULTITEXCOORD3IPROC MultiTexCoord3i;
	Opengltokens::PFNGLMULTITEXCOORD3IVPROC MultiTexCoord3iv;
	Opengltokens::PFNGLMULTITEXCOORD3SPROC MultiTexCoord3s;
	Opengltokens::PFNGLMULTITEXCOORD3SVPROC MultiTexCoord3sv;
	Opengltokens::PFNGLMULTITEXCOORD4DPROC MultiTexCoord4d;
	Opengltokens::PFNGLMULTITEXCOORD4DVPROC MultiTexCoord4dv;
	Opengltokens::PFNGLMULTITEXCOORD4FPROC MultiTexCoord4f;
	Opengltokens::PFNGLMULTITEXCOORD4FVPROC MultiTexCoord4fv;
	Opengltokens::PFNGLMULTITEXCOORD4IPROC MultiTexCoord4i;
	Opengltokens::PFNGLMULTITEXCOORD4IVPROC MultiTexCoord4iv;
	Opengltokens::PFNGLMULTITEXCOORD4SPROC MultiTexCoord4s;
	Opengltokens::PFNGLMULTITEXCOORD4SVPROC MultiTexCoord4sv;
	Opengltokens::PFNGLGETINTEGER64I_VPROC GetInteger64i_v;
	Opengltokens::PFNGLGETBUFFERPARAMETERI64VPROC GetBufferParameteri64v;
	Opengltokens::PFNGLPROGRAMPARAMETERIPROC ProgramParameteri;
	Opengltokens::PFNGLPROGRAMSTRINGARBPROC ProgramString;
	Opengltokens::PFNGLBINDPROGRAMARBPROC BindProgram;
	Opengltokens::PFNGLDELETEPROGRAMSARBPROC DeletePrograms;
	Opengltokens::PFNGLGENPROGRAMSARBPROC GenPrograms;
	Opengltokens::PFNGLPROGRAMENVPARAMETER4DARBPROC ProgramEnvParameter4d;
	Opengltokens::PFNGLPROGRAMENVPARAMETER4DVARBPROC ProgramEnvParameter4dv;
	Opengltokens::PFNGLPROGRAMENVPARAMETER4FARBPROC ProgramEnvParameter4f;
	Opengltokens::PFNGLPROGRAMENVPARAMETER4FVARBPROC ProgramEnvParameter4fv;
	Opengltokens::PFNGLPROGRAMLOCALPARAMETER4DARBPROC ProgramLocalParameter4d;
	Opengltokens::PFNGLPROGRAMLOCALPARAMETER4DVARBPROC ProgramLocalParameter4dv;
	Opengltokens::PFNGLPROGRAMLOCALPARAMETER4FARBPROC ProgramLocalParameter4f;
	Opengltokens::PFNGLPROGRAMLOCALPARAMETER4FVARBPROC ProgramLocalParameter4fv;
	Opengltokens::PFNGLGETPROGRAMENVPARAMETERDVARBPROC GetProgramEnvParameterdv;
	Opengltokens::PFNGLGETPROGRAMENVPARAMETERFVARBPROC GetProgramEnvParameterfv;
	Opengltokens::PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC GetProgramLocalParameterdv;
	Opengltokens::PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC GetProgramLocalParameterfv;
	Opengltokens::PFNGLTEXIMAGE2DMULTISAMPLEPROC TexImage2DMultisample;
	Opengltokens::PFNGLTEXIMAGE3DMULTISAMPLEPROC TexImage3DMultisample;
	Opengltokens::PFNGLGETMULTISAMPLEFVPROC GetMultisamplefv;
	Opengltokens::PFNGLSAMPLEMASKIPROC SampleMaski;
	Opengltokens::PFNGLPROVOKINGVERTEXPROC ProvokingVertex;
	Opengltokens::PFNGLFENCESYNCPROC FenceSync;
	Opengltokens::PFNGLISSYNCPROC IsSync;
	Opengltokens::PFNGLDELETESYNCPROC DeleteSync;
	Opengltokens::PFNGLCLIENTWAITSYNCPROC ClientWaitSync;
	Opengltokens::PFNGLWAITSYNCPROC WaitSync;
	Opengltokens::PFNGLGETINTEGER64VPROC GetInteger64v;
	Opengltokens::PFNGLGETSYNCIVPROC GetSynciv;
	Opengltokens::PFNGLBLENDEQUATIONIPROC BlendEquationi;
	Opengltokens::PFNGLBLENDEQUATIONSEPARATEIPROC BlendEquationSeparatei;
	Opengltokens::PFNGLBLENDFUNCIPROC BlendFunci;
	Opengltokens::PFNGLBLENDFUNCSEPARATEIPROC BlendFuncSeparatei;
	Opengltokens::PFNGLMINSAMPLESHADINGPROC MinSampleShading;
	Opengltokens::PFNGLGENSAMPLERSPROC GenSamplers;
	Opengltokens::PFNGLDELETESAMPLERSPROC DeleteSamplers;
	Opengltokens::PFNGLISSAMPLERPROC IsSampler;
	Opengltokens::PFNGLBINDSAMPLERPROC BindSampler;
	Opengltokens::PFNGLSAMPLERPARAMETERIPROC SamplerParameteri;
	Opengltokens::PFNGLSAMPLERPARAMETERIVPROC SamplerParameteriv;
	Opengltokens::PFNGLSAMPLERPARAMETERFPROC SamplerParameterf;
	Opengltokens::PFNGLSAMPLERPARAMETERFVPROC SamplerParameterfv;
	Opengltokens::PFNGLSAMPLERPARAMETERIIVPROC SamplerParameterIiv;
	Opengltokens::PFNGLSAMPLERPARAMETERIUIVPROC SamplerParameterIuiv;
	Opengltokens::PFNGLGETSAMPLERPARAMETERIVPROC GetSamplerParameteriv;
	Opengltokens::PFNGLGETSAMPLERPARAMETERIIVPROC GetSamplerParameterIiv;
	Opengltokens::PFNGLGETSAMPLERPARAMETERFVPROC GetSamplerParameterfv;
	Opengltokens::PFNGLGETSAMPLERPARAMETERIFVPROC GetSamplerParameterIfv;
	Opengltokens::PFNGLCLIENTATTRIBDEFAULTEXTPROC ClientAttribDefault;
	Opengltokens::PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC PushClientAttribDefault;
	Opengltokens::PFNGLMATRIXLOADFEXTPROC MatrixLoadf;
	Opengltokens::PFNGLMATRIXLOADDEXTPROC MatrixLoadd;
	Opengltokens::PFNGLMATRIXMULTFEXTPROC MatrixMultf;
	Opengltokens::PFNGLMATRIXMULTDEXTPROC MatrixMultd;
	Opengltokens::PFNGLMATRIXLOADIDENTITYEXTPROC MatrixLoadIdentity;
	Opengltokens::PFNGLMATRIXROTATEFEXTPROC MatrixRotatef;
	Opengltokens::PFNGLMATRIXROTATEDEXTPROC MatrixRotated;
	Opengltokens::PFNGLMATRIXSCALEFEXTPROC MatrixScalef;
	Opengltokens::PFNGLMATRIXSCALEDEXTPROC MatrixScaled;
	Opengltokens::PFNGLMATRIXTRANSLATEFEXTPROC MatrixTranslatef;
	Opengltokens::PFNGLMATRIXTRANSLATEDEXTPROC MatrixTranslated;
	Opengltokens::PFNGLMATRIXFRUSTUMEXTPROC MatrixFrustum;
	Opengltokens::PFNGLMATRIXORTHOEXTPROC MatrixOrtho;
	Opengltokens::PFNGLMATRIXPOPEXTPROC MatrixPop;
	Opengltokens::PFNGLMATRIXPUSHEXTPROC MatrixPush;
	Opengltokens::PFNGLMATRIXLOADTRANSPOSEFEXTPROC MatrixLoadTransposef;
	Opengltokens::PFNGLMATRIXLOADTRANSPOSEDEXTPROC MatrixLoadTransposed;
	Opengltokens::PFNGLMATRIXMULTTRANSPOSEFEXTPROC MatrixMultTransposef;
	Opengltokens::PFNGLMATRIXMULTTRANSPOSEDEXTPROC MatrixMultTransposed;
	Opengltokens::PFNGLTEXTUREPARAMETERFEXTPROC TextureParameterf;
	Opengltokens::PFNGLTEXTUREPARAMETERFVEXTPROC TextureParameterfv;
	Opengltokens::PFNGLTEXTUREPARAMETERIEXTPROC TextureParameteri;
	Opengltokens::PFNGLTEXTUREPARAMETERIVEXTPROC TextureParameteriv;
	Opengltokens::PFNGLTEXTUREIMAGE1DEXTPROC TextureImage1D;
	Opengltokens::PFNGLTEXTUREIMAGE2DEXTPROC TextureImage2D;
	Opengltokens::PFNGLTEXTURESUBIMAGE1DEXTPROC TextureSubImage1D;
	Opengltokens::PFNGLTEXTURESUBIMAGE2DEXTPROC TextureSubImage2D;
	Opengltokens::PFNGLCOPYTEXTUREIMAGE1DEXTPROC CopyTextureImage1D;
	Opengltokens::PFNGLCOPYTEXTUREIMAGE2DEXTPROC CopyTextureImage2D;
	Opengltokens::PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC CopyTextureSubImage1D;
	Opengltokens::PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC CopyTextureSubImage2D;
	Opengltokens::PFNGLGETTEXTUREIMAGEEXTPROC GetTextureImage;
	Opengltokens::PFNGLGETTEXTUREPARAMETERFVEXTPROC GetTextureParameterfv;
	Opengltokens::PFNGLGETTEXTUREPARAMETERIVEXTPROC GetTextureParameteriv;
	Opengltokens::PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC GetTextureLevelParameterfv;
	Opengltokens::PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC GetTextureLevelParameteriv;
	Opengltokens::PFNGLTEXTUREIMAGE3DEXTPROC TextureImage3D;
	Opengltokens::PFNGLTEXTURESUBIMAGE3DEXTPROC TextureSubImage3D;
	Opengltokens::PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC CopyTextureSubImage3D;
	Opengltokens::PFNGLMULTITEXPARAMETERFEXTPROC MultiTexParameterf;
	Opengltokens::PFNGLMULTITEXPARAMETERFVEXTPROC MultiTexParameterfv;
	Opengltokens::PFNGLMULTITEXPARAMETERIEXTPROC MultiTexParameteri;
	Opengltokens::PFNGLMULTITEXPARAMETERIVEXTPROC MultiTexParameteriv;
	Opengltokens::PFNGLMULTITEXIMAGE1DEXTPROC MultiTexImage1D;
	Opengltokens::PFNGLMULTITEXIMAGE2DEXTPROC MultiTexImage2D;
	Opengltokens::PFNGLMULTITEXSUBIMAGE1DEXTPROC MultiTexSubImage1D;
	Opengltokens::PFNGLMULTITEXSUBIMAGE2DEXTPROC MultiTexSubImage2D;
	Opengltokens::PFNGLCOPYMULTITEXIMAGE1DEXTPROC CopyMultiTexImage1D;
	Opengltokens::PFNGLCOPYMULTITEXIMAGE2DEXTPROC CopyMultiTexImage2D;
	Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC CopyMultiTexSubImage1D;
	Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC CopyMultiTexSubImage2D;
	Opengltokens::PFNGLGETMULTITEXIMAGEEXTPROC GetMultiTexImage;
	Opengltokens::PFNGLGETMULTITEXPARAMETERFVEXTPROC GetMultiTexParameterfv;
	Opengltokens::PFNGLGETMULTITEXPARAMETERIVEXTPROC GetMultiTexParameteriv;
	Opengltokens::PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC GetMultiTexLevelParameterfv;
	Opengltokens::PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC GetMultiTexLevelParameteriv;
	Opengltokens::PFNGLMULTITEXIMAGE3DEXTPROC MultiTexImage3D;
	Opengltokens::PFNGLMULTITEXSUBIMAGE3DEXTPROC MultiTexSubImage3D;
	Opengltokens::PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC CopyMultiTexSubImage3D;
	Opengltokens::PFNGLBINDMULTITEXTUREEXTPROC BindMultiTexture;
	Opengltokens::PFNGLENABLECLIENTSTATEINDEXEDEXTPROC EnableClientStateIndexed;
	Opengltokens::PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC DisableClientStateIndexed;
	Opengltokens::PFNGLMULTITEXCOORDPOINTEREXTPROC MultiTexCoordPointer;
	Opengltokens::PFNGLMULTITEXENVFEXTPROC MultiTexEnvf;
	Opengltokens::PFNGLMULTITEXENVFVEXTPROC MultiTexEnvfv;
	Opengltokens::PFNGLMULTITEXENVIEXTPROC MultiTexEnvi;
	Opengltokens::PFNGLMULTITEXENVIVEXTPROC MultiTexEnviv;
	Opengltokens::PFNGLMULTITEXGENDEXTPROC MultiTexGend;
	Opengltokens::PFNGLMULTITEXGENDVEXTPROC MultiTexGendv;
	Opengltokens::PFNGLMULTITEXGENFEXTPROC MultiTexGenf;
	Opengltokens::PFNGLMULTITEXGENFVEXTPROC MultiTexGenfv;
	Opengltokens::PFNGLMULTITEXGENIEXTPROC MultiTexGeni;
	Opengltokens::PFNGLMULTITEXGENIVEXTPROC MultiTexGeniv;
	Opengltokens::PFNGLGETMULTITEXENVFVEXTPROC GetMultiTexEnvfv;
	Opengltokens::PFNGLGETMULTITEXENVIVEXTPROC GetMultiTexEnviv;
	Opengltokens::PFNGLGETMULTITEXGENDVEXTPROC GetMultiTexGendv;
	Opengltokens::PFNGLGETMULTITEXGENFVEXTPROC GetMultiTexGenfv;
	Opengltokens::PFNGLGETMULTITEXGENIVEXTPROC GetMultiTexGeniv;
	Opengltokens::PFNGLGETFLOATINDEXEDVEXTPROC GetFloatIndexedv;
	Opengltokens::PFNGLGETDOUBLEINDEXEDVEXTPROC GetDoubleIndexedv;
	Opengltokens::PFNGLGETPOINTERINDEXEDVEXTPROC GetPointerIndexedv;
	Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC CompressedTextureImage3D;
	Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC CompressedTextureImage2D;
	Opengltokens::PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC CompressedTextureImage1D;
	Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC CompressedTextureSubImage3D;
	Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC CompressedTextureSubImage2D;
	Opengltokens::PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC CompressedTextureSubImage1D;
	Opengltokens::PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC GetCompressedTextureImage;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC CompressedMultiTexImage3D;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC CompressedMultiTexImage2D;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC CompressedMultiTexImage1D;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC CompressedMultiTexSubImage3D;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC CompressedMultiTexSubImage2D;
	Opengltokens::PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC CompressedMultiTexSubImage1D;
	Opengltokens::PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC GetCompressedMultiTexImage;
	Opengltokens::PFNGLNAMEDPROGRAMSTRINGEXTPROC NamedProgramString;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC NamedProgramLocalParameter4d;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC NamedProgramLocalParameter4dv;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC NamedProgramLocalParameter4f;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC NamedProgramLocalParameter4fv;
	Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC GetNamedProgramLocalParameterdv;
	Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC GetNamedProgramLocalParameterfv;
	Opengltokens::PFNGLGETNAMEDPROGRAMIVEXTPROC GetNamedProgramiv;
	Opengltokens::PFNGLGETNAMEDPROGRAMSTRINGEXTPROC GetNamedProgramString;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC NamedProgramLocalParameters4fv;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC NamedProgramLocalParameterI4i;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC NamedProgramLocalParameterI4iv;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC NamedProgramLocalParametersI4iv;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC NamedProgramLocalParameterI4ui;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC NamedProgramLocalParameterI4uiv;
	Opengltokens::PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC NamedProgramLocalParametersI4uiv;
	Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC GetNamedProgramLocalParameterIiv;
	Opengltokens::PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC GetNamedProgramLocalParameterIuiv;
	Opengltokens::PFNGLTEXTUREPARAMETERIIVEXTPROC TextureParameterIiv;
	Opengltokens::PFNGLTEXTUREPARAMETERIUIVEXTPROC TextureParameterIuiv;
	Opengltokens::PFNGLGETTEXTUREPARAMETERIIVEXTPROC GetTextureParameterIiv;
	Opengltokens::PFNGLGETTEXTUREPARAMETERIUIVEXTPROC GetTextureParameterIuiv;
	Opengltokens::PFNGLMULTITEXPARAMETERIIVEXTPROC MultiTexParameterIiv;
	Opengltokens::PFNGLMULTITEXPARAMETERIUIVEXTPROC MultiTexParameterIuiv;
	Opengltokens::PFNGLGETMULTITEXPARAMETERIIVEXTPROC GetMultiTexParameterIiv;
	Opengltokens::PFNGLGETMULTITEXPARAMETERIUIVEXTPROC GetMultiTexParameterIuiv;
	Opengltokens::PFNGLNAMEDBUFFERDATAEXTPROC NamedBufferData;
	Opengltokens::PFNGLNAMEDBUFFERSUBDATAEXTPROC NamedBufferSubData;
	Opengltokens::PFNGLMAPNAMEDBUFFEREXTPROC MapNamedBuffer;
	Opengltokens::PFNGLUNMAPNAMEDBUFFEREXTPROC UnmapNamedBuffer;
	Opengltokens::PFNGLMAPNAMEDBUFFERRANGEEXTPROC MapNamedBufferRange;
	Opengltokens::PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC FlushMappedNamedBufferRange;
	Opengltokens::PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC NamedCopyBufferSubData;
	Opengltokens::PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC GetNamedBufferParameteriv;
	Opengltokens::PFNGLGETNAMEDBUFFERPOINTERVEXTPROC GetNamedBufferPointerv;
	Opengltokens::PFNGLGETNAMEDBUFFERSUBDATAEXTPROC GetNamedBufferSubData;
	Opengltokens::PFNGLTEXTUREBUFFEREXTPROC TextureBuffer;
	Opengltokens::PFNGLMULTITEXBUFFEREXTPROC MultiTexBuffer;
	Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC NamedRenderbufferStorage;
	Opengltokens::PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC GetNamedRenderbufferParameteriv;
	Opengltokens::PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC CheckNamedFramebufferStatus;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC NamedFramebufferTexture1D;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC NamedFramebufferTexture2D;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC NamedFramebufferTexture3D;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC NamedFramebufferRenderbuffer;
	Opengltokens::PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC GetNamedFramebufferAttachmentParameteriv;
	Opengltokens::PFNGLGENERATETEXTUREMIPMAPEXTPROC GenerateTextureMipmap;
	Opengltokens::PFNGLGENERATEMULTITEXMIPMAPEXTPROC GenerateMultiTexMipmap;
	Opengltokens::PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC FramebufferDrawBuffer;
	Opengltokens::PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC FramebufferDrawBuffers;
	Opengltokens::PFNGLFRAMEBUFFERREADBUFFEREXTPROC FramebufferReadBuffer;
	Opengltokens::PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC GetFramebufferParameteriv;
	Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC NamedRenderbufferStorageMultisample;
	Opengltokens::PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC NamedRenderbufferStorageMultisampleCoverage;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC NamedFramebufferTexture;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC NamedFramebufferTextureLayer;
	Opengltokens::PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC NamedFramebufferTextureFace;
	Opengltokens::PFNGLTEXTURERENDERBUFFEREXTPROC TextureRenderbuffer;
	Opengltokens::PFNGLMULTITEXRENDERBUFFEREXTPROC MultiTexRenderbuffer;
	Opengltokens::PFNGLFRAMETERMINATORGREMEDYPROC FrameTerminatorGREMEDY;
	Opengltokens::PFNGLSTRINGMARKERGREMEDYPROC StringMarkerGREMEDY;
	void __stdcall (*DebugMessageEnableAMDX)(unsigned category, unsigned severity, int Count, unsigned &ids, bool Enabled);
	void __stdcall (*DebugMessageCallbackAMDX)(Opengltokens::TDebugProcAMD callback, void * userParam);
	void __stdcall (*DebugMessageControl)(unsigned type_, unsigned Source, unsigned severity, int Count, unsigned &ids, bool Enabled);
	void __stdcall (*DebugMessageInsert)(unsigned Source, unsigned severity, unsigned id, int length, const char * buf);
	void __stdcall (*DebugMessageCallback)(Opengltokens::TDebugProc callback, void * userParam);
	unsigned __stdcall (*GetDebugMessageLog)(unsigned Count, int bufSize, unsigned &severity, unsigned &severities, unsigned &ids, int &lengths, char * messageLog);
	Opengltokens::PFNGLGENPATHSNVPROC GenPathsNV;
	Opengltokens::PFNGLDELETEPATHSNVPROC DeletePathsNV;
	Opengltokens::PFNGLISPATHNVPROC IsPathNV;
	Opengltokens::PFNGLPATHCOMMANDSNVPROC PathCommandsNV;
	Opengltokens::PFNGLPATHCOORDSNVPROC PathCoordsNV;
	Opengltokens::PFNGLPATHSUBCOMMANDSNVPROC PathSubCommandsNV;
	Opengltokens::PFNGLPATHSUBCOORDSNVPROC PathSubCoordsNV;
	Opengltokens::PFNGLPATHSTRINGNVPROC PathStringNV;
	Opengltokens::PFNGLPATHGLYPHSNVPROC PathGlyphsNV;
	Opengltokens::PFNGLPATHGLYPHRANGENVPROC PathGlyphRangeNV;
	Opengltokens::PFNGLWEIGHTPATHSNVPROC WeightPathsNV;
	Opengltokens::PFNGLCOPYPATHNVPROC CopyPathNV;
	Opengltokens::PFNGLINTERPOLATEPATHSNVPROC InterpolatePathsNV;
	Opengltokens::PFNGLPATHPARAMETERIVNVPROC PathParameterivNV;
	Opengltokens::PFNGLPATHPARAMETERINVPROC PathParameteriNV;
	Opengltokens::PFNGLPATHPARAMETERFVNVPROC PathParameterfvNV;
	Opengltokens::PFNGLPATHPARAMETERFNVPROC PathParameterfNV;
	Opengltokens::PFNGLPATHDASHARRAYNVPROC PathDashArrayNV;
	Opengltokens::PFNGLPATHSTENCILFUNCNVPROC PathStencilFuncNV;
	Opengltokens::PFNGLSTENCILFILLPATHNVPROC StencilFillPathNV;
	Opengltokens::PFNGLSTENCILSTROKEPATHNVPROC StencilStrokePathNV;
	Opengltokens::PFNGLSTENCILFILLPATHINSTANCEDNVPROC StencilFillPathInstancedNV;
	Opengltokens::PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC StencilStrokePathInstancedNV;
	Opengltokens::PFNGLPATHCOLORGENNVPROC PathColorGenNV;
	Opengltokens::PFNGLPATHTEXGENNVPROC PathTexGenNV;
	Opengltokens::PFNGLPATHFOGGENNVPROC PathFogGenNV;
	Opengltokens::PFNGLCOVERFILLPATHNVPROC CoverFillPathNV;
	Opengltokens::PFNGLCOVERSTROKEPATHNVPROC CoverStrokePathNV;
	Opengltokens::PFNGLCOVERFILLPATHINSTANCEDNVPROC CoverFillPathInstancedNV;
	Opengltokens::PFNGLCOVERSTROKEPATHINSTANCEDNVPROC CoverStrokePathInstancedNV;
	Opengltokens::PFNGLGETPATHPARAMETERIVNVPROC GetPathParameterivNV;
	Opengltokens::PFNGLGETPATHPARAMETERFVNVPROC GetPathParameterfvNV;
	Opengltokens::PFNGLGETPATHCOMMANDSNVPROC GetPathCommandsNV;
	Opengltokens::PFNGLGETPATHCOORDSNVPROC GetPathCoordsNV;
	Opengltokens::PFNGLGETPATHDASHARRAYNVPROC GetPathDashArrayNV;
	Opengltokens::PFNGLGETPATHMETRICSNVPROC GetPathMetricsNV;
	Opengltokens::PFNGLGETPATHMETRICRANGENVPROC GetPathMetricRangeNV;
	Opengltokens::PFNGLGETPATHSPACINGNVPROC GetPathSpacingNV;
	Opengltokens::PFNGLGETPATHCOLORGENIVNVPROC GetPathColorGenivNV;
	Opengltokens::PFNGLGETPATHCOLORGENFVNVPROC GetPathColorGenfvNV;
	Opengltokens::PFNGLGETPATHTEXGENIVNVPROC GetPathTexGenivNV;
	Opengltokens::PFNGLGETPATHTEXGENFVNVPROC GetPathTexGenfvNV;
	Opengltokens::PFNGLISPOINTINFILLPATHNVPROC IsPointInFillPathNV;
	Opengltokens::PFNGLISPOINTINSTROKEPATHNVPROC IsPointInStrokePathNV;
	Opengltokens::PFNGLGETPATHLENGTHNVPROC GetPathLengthNV;
	Opengltokens::PFNGLPOINTALONGPATHNVPROC PointAlongPathNV;
	Opengltokens::PFNGLPATHSTENCILDEPTHOFFSETNVPROC PathStencilDepthOffsetNV;
	Opengltokens::PFNGLPATHCOVERDEPTHFUNCNVPROC PathCoverDepthFuncNV;
	bool W_ARB_buffer_region;
	bool W_ARB_create_context;
	bool W_ARB_create_context_profile;
	bool W_ARB_extensions_string;
	bool W_ARB_framebuffer_sRGB;
	bool W_ARB_make_current_read;
	bool W_ARB_multisample;
	bool W_ARB_pbuffer;
	bool W_ARB_pixel_format;
	bool W_ARB_pixel_format_float;
	bool W_ARB_render_texture;
	bool W_ATI_pixel_format_float;
	bool W_EXT_framebuffer_sRGB;
	bool W_EXT_pixel_format_packed_float;
	bool W_EXT_swap_control;
	bool W_NV_gpu_affinity;
	bool W_EXT_create_context_es2_profile;
	bool W_NV_DX_interop;
	bool W_NV_DX_interop2;
	Opengltokens::PFNWGLCREATEBUFFERREGIONARBPROC WCreateBufferRegionARB;
	Opengltokens::PFNWGLDELETEBUFFERREGIONARBPROC WDeleteBufferRegionARB;
	Opengltokens::PFNWGLSAVEBUFFERREGIONARBPROC WSaveBufferRegionARB;
	Opengltokens::PFNWGLRESTOREBUFFERREGIONARBPROC WRestoreBufferRegionARB;
	Opengltokens::PFNWGLGETEXTENSIONSSTRINGARBPROC WGetExtensionsStringARB;
	Opengltokens::PFNWGLGETPIXELFORMATATTRIBIVARBPROC WGetPixelFormatAttribivARB;
	Opengltokens::PFNWGLGETPIXELFORMATATTRIBFVARBPROC WGetPixelFormatAttribfvARB;
	Opengltokens::PFNWGLCHOOSEPIXELFORMATARBPROC WChoosePixelFormatARB;
	Opengltokens::PFNWGLMAKECONTEXTCURRENTARBPROC WMakeContextCurrentARB;
	Opengltokens::PFNWGLGETCURRENTREADDCARBPROC WGetCurrentReadDCARB;
	Opengltokens::PFNWGLCREATEPBUFFERARBPROC WCreatePbufferARB;
	Opengltokens::PFNWGLGETPBUFFERDCARBPROC WGetPbufferDCARB;
	Opengltokens::PFNWGLRELEASEPBUFFERDCARBPROC WReleasePbufferDCARB;
	Opengltokens::PFNWGLDESTROYPBUFFERARBPROC WDestroyPbufferARB;
	Opengltokens::PFNWGLQUERYPBUFFERARBPROC WQueryPbufferARB;
	Opengltokens::PFNWGLBINDTEXIMAGEARBPROC WBindTexImageARB;
	Opengltokens::PFNWGLRELEASETEXIMAGEARBPROC WReleaseTexImageARB;
	Opengltokens::PFNWGLSETPBUFFERATTRIBARBPROC WSetPbufferAttribARB;
	Opengltokens::PFNWGLCREATECONTEXTATTRIBSARBPROC WCreateContextAttribsARB;
	Opengltokens::PFNWGLENUMGPUSNVPROC WEnumGpusNV;
	Opengltokens::PFNWGLENUMGPUDEVICESNVPROC WEnumGpuDevicesNV;
	Opengltokens::PFNWGLCREATEAFFINITYDCNVPROC WCreateAffinityDCNV;
	Opengltokens::PFNWGLENUMGPUSFROMAFFINITYDCNVPROC WEnumGpusFromAffinityDCNV;
	Opengltokens::PFNWGLDELETEDCNVPROC WDeleteDCNV;
	Opengltokens::PFNWGLDXSETRESOURCESHAREHANDLEPROC WDXSetResourceShareHandleNV;
	Opengltokens::PFNWGLDXOPENDEVICEPROC WDXOpenDeviceNV;
	Opengltokens::PFNWGLDXCLOSEDEVICEPROC WDXCloseDeviceNV;
	Opengltokens::PFNWGLDXREGISTEROBJECTPROC WDXRegisterObjectNV;
	Opengltokens::PFNWGLDXUNREGISTEROBJECTPROC WDXUnregisterObjectNV;
	Opengltokens::PFNWGLDXOBJECTACCESSPROC WDXObjectAccessNV;
	Opengltokens::PFNWGLDXLOCKOBJECTSPROC WDXLockObjectsNV;
	Opengltokens::PFNWGLDXUNLOCKOBJECTSNVPROC WDXUnlockObjectsNV;
	Opengltokens::PFNWGLSWAPINTERVALEXTPROC WSwapIntervalEXT;
	Opengltokens::PFNWGLGETSWAPINTERVALEXTPROC WGetSwapIntervalEXT;
	Opengltokens::PFNWGLALLOCATEMEMORYNVPROC WAllocateMemoryNV;
	Opengltokens::PFNWGLFREEMEMORYNVPROC WFreeMemoryNV;
	void __stdcall (*UNurbsCallbackDataEXT)(Opengltokens::PGLUNurbs nurb, void * userData);
	Opengltokens::PGLUNurbs __stdcall (*UNewNurbsTessellatorEXT)(void);
	void __stdcall (*UDeleteNurbsTessellatorEXT)(Opengltokens::PGLUNurbs nurb);
	__fastcall TGLExtensionsAndEntryPoints(void);
	void __fastcall Initialize(bool ATemporary = false);
	void __fastcall Close(void);
	void __fastcall CheckError(void);
	void __fastcall ClearError(void);
	__property bool IsInitialized = {read=FInitialized, nodefault};
	__property bool DebugMode = {read=FDebug, write=FDebug, nodefault};
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TGLExtensionsAndEntryPoints(void) { }
	
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
extern "C" void * __stdcall wglGetProcAddress(char * ProcName);
extern "C" BOOL __stdcall wglCopyContext(HGLRC p1, HGLRC p2, unsigned p3);
extern "C" HGLRC __stdcall wglCreateContext(HDC DC);
extern "C" HGLRC __stdcall wglCreateLayerContext(HDC p1, int p2);
extern "C" BOOL __stdcall wglDeleteContext(HGLRC p1);
extern "C" BOOL __stdcall wglDescribeLayerPlane(HDC p1, int p2, int p3, unsigned p4, tagLAYERPLANEDESCRIPTOR &p5);
extern "C" HGLRC __stdcall wglGetCurrentContext(void);
extern "C" HDC __stdcall wglGetCurrentDC(void);
extern "C" int __stdcall wglGetLayerPaletteEntries(HDC p1, int p2, int p3, int p4, void *pcr);
extern "C" BOOL __stdcall wglMakeCurrent(HDC DC, HGLRC p2);
extern "C" BOOL __stdcall wglRealizeLayerPalette(HDC p1, int p2, BOOL p3);
extern "C" int __stdcall wglSetLayerPaletteEntries(HDC p1, int p2, int p3, int p4, void *pcr);
extern "C" BOOL __stdcall wglShareLists(HGLRC p1, HGLRC p2);
extern "C" BOOL __stdcall wglSwapLayerBuffers(HDC p1, unsigned p2);
extern "C" unsigned __stdcall wglSwapMultipleBuffers(unsigned p1, const Opengltokens::PWGLswap p2);
extern "C" BOOL __stdcall wglUseFontBitmapsA(HDC DC, unsigned p2, unsigned p3, unsigned p4);
extern "C" BOOL __stdcall wglUseFontOutlinesA(HDC p1, unsigned p2, unsigned p3, unsigned p4, float p5, float p6, int p7, Winapi::Windows::PGlyphMetricsFloat p8);
extern "C" BOOL __stdcall wglUseFontBitmapsW(HDC DC, unsigned p2, unsigned p3, unsigned p4);
extern "C" BOOL __stdcall wglUseFontOutlinesW(HDC p1, unsigned p2, unsigned p3, unsigned p4, float p5, float p6, int p7, Winapi::Windows::PGlyphMetricsFloat p8);
extern "C" BOOL __stdcall wglUseFontBitmaps(HDC DC, unsigned p2, unsigned p3, unsigned p4);
extern "C" BOOL __stdcall wglUseFontOutlines(HDC p1, unsigned p2, unsigned p3, unsigned p4, float p5, float p6, int p7, Winapi::Windows::PGlyphMetricsFloat p8);
extern "C" char * __stdcall gluErrorString(unsigned errCode);
extern "C" char * __stdcall gluGetString(unsigned Name);
extern "C" void __stdcall gluOrtho2D(double left, double right, double bottom, double top);
extern "C" void __stdcall gluPerspective(double fovy, double aspect, double zNear, double zFar);
extern "C" void __stdcall gluPickMatrix(double X, double y, double Width, double Height, const Vectortypes::TVector4i &Viewport);
extern "C" void __stdcall gluLookAt(double eyex, double eyey, double eyez, double centerx, double centery, double centerz, double upx, double upy, double upz);
extern "C" int __stdcall gluProject(double objx, double objy, double objz, const Vectortypes::TMatrix4d &modelMatrix, const Vectortypes::TMatrix4d &projMatrix, const Vectortypes::TVector4i &Viewport, System::PDouble winx, System::PDouble winy, System::PDouble winz);
extern "C" int __stdcall gluUnProject(double winx, double winy, double winz, const Vectortypes::TMatrix4d &modelMatrix, const Vectortypes::TMatrix4d &projMatrix, const Vectortypes::TVector4i &Viewport, System::PDouble objx, System::PDouble objy, System::PDouble objz);
extern "C" int __stdcall gluScaleImage(unsigned format, int widthin, int heightin, unsigned typein, void * datain, int widthout, int heightout, unsigned typeout, void * dataout);
extern "C" int __stdcall gluBuild1DMipmaps(unsigned target, int Components, int Width, unsigned format, unsigned atype, void * Data);
extern "C" int __stdcall gluBuild2DMipmaps(unsigned target, int Components, int Width, int Height, unsigned format, unsigned atype, void * Data);
extern "C" Opengltokens::PGLUQuadric __stdcall gluNewQuadric(void);
extern "C" void __stdcall gluDeleteQuadric(Opengltokens::PGLUQuadric state);
extern "C" void __stdcall gluQuadricNormals(Opengltokens::PGLUQuadric quadObject, unsigned normals);
extern "C" void __stdcall gluQuadricTexture(Opengltokens::PGLUQuadric quadObject, System::ByteBool textureCoords);
extern "C" void __stdcall gluQuadricOrientation(Opengltokens::PGLUQuadric quadObject, unsigned orientation);
extern "C" void __stdcall gluQuadricDrawStyle(Opengltokens::PGLUQuadric quadObject, unsigned drawStyle);
extern "C" void __stdcall gluCylinder(Opengltokens::PGLUQuadric quadObject, double baseRadius, double topRadius, double Height, int slices, int stacks);
extern "C" void __stdcall gluDisk(Opengltokens::PGLUQuadric quadObject, double innerRadius, double outerRadius, int slices, int loops);
extern "C" void __stdcall gluPartialDisk(Opengltokens::PGLUQuadric quadObject, double innerRadius, double outerRadius, int slices, int loops, double startAngle, double sweepAngle);
extern "C" void __stdcall gluSphere(Opengltokens::PGLUQuadric quadObject, double radius, int slices, int stacks);
extern "C" void __stdcall gluQuadricCallback(Opengltokens::PGLUQuadric quadObject, unsigned which, Opengltokens::TGLUQuadricErrorProc fn);
extern "C" Opengltokens::PGLUTesselator __stdcall gluNewTess(void);
extern "C" void __stdcall gluDeleteTess(Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessBeginPolygon(Opengltokens::PGLUTesselator tess, void * polygon_data);
extern "C" void __stdcall gluTessBeginContour(Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessVertex(Opengltokens::PGLUTesselator tess, const Vectortypes::TVector3d &coords, void * Data);
extern "C" void __stdcall gluTessEndContour(Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessEndPolygon(Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluTessProperty(Opengltokens::PGLUTesselator tess, unsigned which, double Value);
extern "C" void __stdcall gluTessNormal(Opengltokens::PGLUTesselator tess, double X, double y, double z);
extern "C" void __stdcall gluTessCallback(Opengltokens::PGLUTesselator tess, unsigned which, void * fn);
extern "C" void __stdcall gluGetTessProperty(Opengltokens::PGLUTesselator tess, unsigned which, System::PDouble Value);
extern "C" Opengltokens::PGLUNurbs __stdcall gluNewNurbsRenderer(void);
extern "C" void __stdcall gluDeleteNurbsRenderer(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginSurface(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginCurve(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndCurve(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndSurface(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluBeginTrim(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluEndTrim(Opengltokens::PGLUNurbs nobj);
extern "C" void __stdcall gluPwlCurve(Opengltokens::PGLUNurbs nobj, int Count, System::PSingle points, int stride, unsigned atype);
extern "C" void __stdcall gluNurbsCurve(Opengltokens::PGLUNurbs nobj, int nknots, System::PSingle knot, int stride, System::PSingle ctlarray, int order, unsigned atype);
extern "C" void __stdcall gluNurbsSurface(Opengltokens::PGLUNurbs nobj, int sknot_count, System::PSingle sknot, int tknot_count, System::PSingle tknot, int s_stride, int t_stride, System::PSingle ctlarray, int sorder, int torder, unsigned atype);
extern "C" void __stdcall gluLoadSamplingMatrices(Opengltokens::PGLUNurbs nobj, const Vectortypes::TMatrix4f &modelMatrix, const Vectortypes::TMatrix4f &projMatrix, const Vectortypes::TVector4i &Viewport);
extern "C" void __stdcall gluNurbsProperty(Opengltokens::PGLUNurbs nobj, unsigned aproperty, float Value);
extern "C" void __stdcall gluGetNurbsProperty(Opengltokens::PGLUNurbs nobj, unsigned aproperty, System::PSingle Value);
extern "C" void __stdcall gluNurbsCallback(Opengltokens::PGLUNurbs nobj, unsigned which, Opengltokens::TGLUNurbsErrorProc fn);
extern "C" void __stdcall gluBeginPolygon(Opengltokens::PGLUTesselator tess);
extern "C" void __stdcall gluNextContour(Opengltokens::PGLUTesselator tess, unsigned atype);
extern "C" void __stdcall gluEndPolygon(Opengltokens::PGLUTesselator tess);
extern PACKAGE void * __fastcall GLGetProcAddress(char * ProcName);
extern PACKAGE void * __fastcall GLLibGetProcAddress(char * ProcName);
extern PACKAGE void __fastcall TrimAndSplitVersionString(System::UnicodeString buffer, int &max, int &min);
extern PACKAGE bool __fastcall IsVersionMet(int MajorVersion, int MinorVersion, int actualMajorVersion, int actualMinorVersion);
extern PACKAGE bool __fastcall InitOpenGL(void);
extern PACKAGE bool __fastcall InitOpenGLFromLibrary(const System::UnicodeString GLName, const System::UnicodeString GLUName);
extern PACKAGE bool __fastcall IsOpenGLInitialized(void);
extern PACKAGE void __fastcall CloseOpenGL(void);
extern PACKAGE void __fastcall UnloadOpenGL(void);
extern PACKAGE bool __fastcall LoadOpenGL(void);
extern PACKAGE bool __fastcall LoadOpenGLFromLibrary(System::UnicodeString GLName, System::UnicodeString GLUName);
extern PACKAGE bool __fastcall IsOpenGLLoaded(void);
extern PACKAGE bool __fastcall IsMesaGL(void);

#if defined(UNICODE)
#pragma option push -w-inl
inline BOOL __stdcall wglUseFontBitmaps(HDC DC, unsigned p2, unsigned p3, unsigned p4)
{
	return wglUseFontBitmapsW(DC, p2, p3, p4);
}
#pragma option pop

#else
#pragma option push -w-inl
inline BOOL __stdcall wglUseFontBitmaps(HDC DC, unsigned p2, unsigned p3, unsigned p4)
{
	return wglUseFontBitmapsA(DC, p2, p3, p4);
}
#pragma option pop

#endif


#if defined(UNICODE)
#pragma option push -w-inl
inline BOOL __stdcall wglUseFontOutlines(HDC p1, unsigned p2, unsigned p3, unsigned p4, float p5, float p6, int p7, Winapi::Windows::PGlyphMetricsFloat p8)
{
	return wglUseFontOutlinesW(p1, p2, p3, p4, p5, p6, p7, p8);
}
#pragma option pop

#else
#pragma option push -w-inl
inline BOOL __stdcall wglUseFontOutlines(HDC p1, unsigned p2, unsigned p3, unsigned p4, float p5, float p6, int p7, Winapi::Windows::PGlyphMetricsFloat p8)
{
	return wglUseFontOutlinesA(p1, p2, p3, p4, p5, p6, p7, p8);
}
#pragma option pop

#endif

}	/* namespace Opengladapter */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_OPENGLADAPTER)
using namespace Opengladapter;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// OpengladapterHPP
