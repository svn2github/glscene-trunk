// CodeGear C++Builder
// Copyright (c) 1995, 2012 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'GLSCUDADataAccess.pas' rev: 24.00 (Win32)

#ifndef GlscudadataaccessHPP
#define GlscudadataaccessHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>	// Pascal unit
#include <SysInit.hpp>	// Pascal unit
#include <GLCrossPlatform.hpp>	// Pascal unit

//-- user supplied -----------------------------------------------------------

namespace Glscudadataaccess
{
//-- type declarations -------------------------------------------------------
template<typename TScalar> class DELPHICLASS GCUDAHostElementAccess__1;
#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename TScalar> class PASCALIMPLEMENTATION GCUDAHostElementAccess__1 : public System::TObject
{
	typedef System::TObject inherited;
	
public:
	typedef System::StaticArray<TScalar, 2> TVector2;
	
	typedef System::StaticArray<TScalar, 3> TVector3;
	
	typedef System::StaticArray<TScalar, 4> TVector4;
	
	
public:
	static const int ElementSize = int(0x0);
	
	
private:
	__classmethod void __fastcall CheckElementSize(unsigned ACNum);
	__classmethod TScalar __fastcall GetScalar();
	__classmethod TVector2 __fastcall GetVector2();
	__classmethod TVector3 __fastcall GetVector3();
	__classmethod TVector4 __fastcall GetVector4();
	__classmethod void __fastcall SetScalar(const TScalar AValue);
	__classmethod void __fastcall SetVector2(const TVector2 AValue);
	__classmethod void __fastcall SetVector3(const TVector3 AValue);
	__classmethod void __fastcall SetVector4(const TVector4 AValue);
	
public:
	__property TScalar Scalar = {read=GetScalar, write=SetScalar};
	__property TVector2 Vector2 = {read=GetVector2, write=SetVector2};
	__property TVector3 Vector3 = {read=GetVector3, write=SetVector3};
	__property TVector4 Vector4 = {read=GetVector4, write=SetVector4};
public:
	/* TObject.Create */ inline __fastcall GCUDAHostElementAccess__1(void) : System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~GCUDAHostElementAccess__1(void) { }
	
};

#pragma pack(pop)

typedef GCUDAHostElementAccess__1<System::Byte>* UByteElement;

typedef GCUDAHostElementAccess__1<System::Int8>* ByteElement;

typedef GCUDAHostElementAccess__1<System::Word>* UShortElement;

typedef GCUDAHostElementAccess__1<short>* ShortElement;

typedef GCUDAHostElementAccess__1<unsigned>* UIntElement;

typedef GCUDAHostElementAccess__1<int>* IntElement;

typedef GCUDAHostElementAccess__1<Glcrossplatform::THalfFloat>* HalfElement;

typedef GCUDAHostElementAccess__1<float>* FloatElement;

typedef GCUDAHostElementAccess__1<double>* DoubleElement;

//-- var, const, procedure ---------------------------------------------------
extern PACKAGE System::ResourceString _cudasSizeMismatch;
#define Glscudadataaccess_cudasSizeMismatch System::LoadResourceString(&Glscudadataaccess::_cudasSizeMismatch)
extern PACKAGE System::PByte __fastcall GetElementAccessAddress(void);
extern PACKAGE unsigned __fastcall GetElementAccessSize(void);
extern PACKAGE void __fastcall SetElementAccessAddress(System::PByte AValue, unsigned ASize);
}	/* namespace Glscudadataaccess */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_GLSCUDADATAACCESS)
using namespace Glscudadataaccess;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// GlscudadataaccessHPP
